<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试</title>
      <link href="/2022/07/08/%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/07/08/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis动态Sql</title>
      <link href="/2022/04/25/MyBatis%E5%8A%A8%E6%80%81Sql/"/>
      <url>/2022/04/25/MyBatis%E5%8A%A8%E6%80%81Sql/</url>
      
        <content type="html"><![CDATA[<h2 id="动态SQL-if"><a href="#动态SQL-if" class="headerlink" title="动态SQL_if"></a>动态SQL_if</h2><p>一个查询的方法的Sql语句不一定是固定的。比如电商网站的查询商品，用户使用不同条件查询，Sql语句就会添加不同的查询条件。此时就需要在方法中使用动态Sql语句。</p><h3 id=""><a href="#" class="headerlink" title=""></a><if></h3><p><code>&lt;if&gt;</code>标签内的Sql片段在满足条件后才会添加，用法为：<code>&lt;if test=&quot;条件&quot;&gt;</code>。例如：根据不同条件查询用户：</p><ol><li><p>持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户通用查询</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByCondition</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>映射文件添加标签</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;select</span> <span class="string">id=&quot;findByCondition&quot; parameterType=&quot;User&quot; resultType=&quot;User&quot;&gt;</span></span><br><span class="line">        <span class="attr">select</span> <span class="string">* from user</span></span><br><span class="line">        <span class="attr">&lt;where&gt;</span></span><br><span class="line">            <span class="meta">&lt;if</span> <span class="string">test=&quot;username != null and username.length() != 0&quot;&gt;</span></span><br><span class="line">                <span class="attr">and</span> <span class="string">username like #&#123;username&#125;</span></span><br><span class="line">            <span class="attr">&lt;/if&gt;</span></span><br><span class="line">            <span class="meta">&lt;if</span> <span class="string">test=&quot;sex != null and sex.length() != 0&quot;&gt;</span></span><br><span class="line">                <span class="attr">and</span> <span class="string">sex = #&#123;sex&#125;</span></span><br><span class="line">            <span class="attr">&lt;/if&gt;</span></span><br><span class="line">            <span class="meta">&lt;if</span> <span class="string">test=&quot;address != null and address.length() != 0&quot;&gt;</span></span><br><span class="line">                <span class="attr">and</span> <span class="string">address = #&#123;address&#125;</span></span><br><span class="line">            <span class="attr">&lt;/if&gt;</span></span><br><span class="line">        <span class="attr">&lt;/where&gt;</span></span><br><span class="line"><span class="attr">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>if中的条件不能使用&amp;&amp;/||，而应该使用and/or</p></li><li><p>if中的条件可以直接通过属性名获取参数POJO的属性值，并且该值可以调用方法。</p></li><li><p>where后为什么要加1=1？</p><p>任意条件都可能拼接到Sql中。如果有多个条件，从第二个条件开始前都需要加And关键字。加上1=1这个永久成立的条件，就不需要考虑后面的条件哪个是第一个条件，后面的条件前都加And关键字即可。</p></li></ol><h2 id="动态SQL-where"><a href="#动态SQL-where" class="headerlink" title="动态SQL_where"></a>动态SQL_where</h2><p><code>&lt;where&gt;</code>可以代替sql中的where 1=1 和第一个and，更符合程序员的开发习惯，使用<code>&lt;where&gt;</code>后的映射文件如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;select</span> <span class="string">id=&quot;findByCondition&quot; resultType=&quot;User&quot; parameterType=&quot;User&quot;&gt;</span></span><br><span class="line">    <span class="attr">select</span> <span class="string">* from user</span></span><br><span class="line">    <span class="attr">&lt;where&gt;</span></span><br><span class="line">        <span class="meta">&lt;if</span> <span class="string">test=&quot;username != null and username.length() != 0&quot;&gt;</span></span><br><span class="line">            <span class="attr">username</span> <span class="string">like #&#123;username&#125;</span></span><br><span class="line">        <span class="attr">&lt;/if&gt;</span></span><br><span class="line">        <span class="meta">&lt;if</span> <span class="string">test=&quot;sex != null and sex.length() != 0&quot;&gt;</span></span><br><span class="line">            <span class="attr">and</span> <span class="string">sex = #&#123;sex&#125;</span></span><br><span class="line">        <span class="attr">&lt;/if&gt;</span></span><br><span class="line">    <span class="attr">&lt;/where&gt;</span></span><br><span class="line"><span class="attr">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态SQL-set"><a href="#动态SQL-set" class="headerlink" title="动态SQL_set"></a>动态SQL_set</h2><p><code>&lt;set&gt;</code>标签用在update语句中。借助<code>&lt;if&gt;</code>，可以只对有具体值的字段进行更新。<code>&lt;set&gt;</code>会自动添加set关键字，并去掉最后一个if语句中多余的逗号。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;update</span> <span class="string">id=&quot;update&quot; parameterType=&quot;User&quot;&gt;</span></span><br><span class="line">    <span class="attr">update</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">&lt;set&gt;</span></span><br><span class="line">        <span class="meta">&lt;if</span> <span class="string">test=&quot;username != null and username.length() &gt; 0&quot;&gt;</span></span><br><span class="line">            <span class="attr">username</span> = <span class="string">#&#123;username&#125;,</span></span><br><span class="line">        <span class="attr">&lt;/if&gt;</span></span><br><span class="line">        <span class="meta">&lt;if</span> <span class="string">test=&quot;sex != null and sex.length() &gt; 0&quot;&gt;</span></span><br><span class="line">            <span class="attr">sex</span> = <span class="string">#&#123;sex&#125;,</span></span><br><span class="line">        <span class="attr">&lt;/if&gt;</span></span><br><span class="line">    <span class="attr">&lt;/set&gt;</span></span><br><span class="line">    <span class="attr">&lt;where&gt;</span></span><br><span class="line">        <span class="attr">id</span> = <span class="string">#&#123;id&#125;</span></span><br><span class="line">    <span class="attr">&lt;/where&gt;</span></span><br><span class="line"><span class="attr">&lt;/update&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态SQL-choose、when、otherwise"><a href="#动态SQL-choose、when、otherwise" class="headerlink" title="动态SQL_choose、when、otherwise"></a>动态SQL_choose、when、otherwise</h2><p>这些标签表示多条件分支，类似JAVA中的<code>switch...case</code>。<code>&lt;choose&gt;</code>类似<code>switch</code>，<code>&lt;when&gt;</code>类似<code>case</code>，<code>&lt;otherwise&gt;</code>类似<code>default</code>，用法如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;select</span> <span class="string">id=&quot;findByCondition&quot; resultType=&quot;User&quot; parameterType=&quot;User&quot;&gt;</span></span><br><span class="line">    <span class="attr">select</span> <span class="string">* from user</span></span><br><span class="line">    <span class="attr">&lt;where&gt;</span></span><br><span class="line">        <span class="attr">&lt;choose&gt;</span></span><br><span class="line">            <span class="meta">&lt;when</span> <span class="string">test=&quot;username.length() &amp;lt; 5&quot;&gt;</span></span><br><span class="line">                <span class="attr">username</span> <span class="string">like #&#123;username&#125;</span></span><br><span class="line">            <span class="attr">&lt;/when&gt;</span></span><br><span class="line">            <span class="meta">&lt;when</span> <span class="string">test=&quot;username.length() &amp;lt; 10&quot;&gt;</span></span><br><span class="line">                <span class="attr">username</span> = <span class="string">#&#123;username&#125;</span></span><br><span class="line">            <span class="attr">&lt;/when&gt;</span></span><br><span class="line">            <span class="attr">&lt;otherwise&gt;</span></span><br><span class="line">                <span class="attr">id</span> = <span class="string">1</span></span><br><span class="line">            <span class="attr">&lt;/otherwise&gt;</span></span><br><span class="line">        <span class="attr">&lt;/choose&gt;</span></span><br><span class="line">    <span class="attr">&lt;/where&gt;</span></span><br><span class="line"><span class="attr">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这段代码的含义为：用户名&lt;5时使用模糊查询，用户名&gt;=5并且&lt;10时使用精确查询，否则查询id为1的用户</p></blockquote><h2 id="动态SQL-foreach"><a href="#动态SQL-foreach" class="headerlink" title="动态SQL_foreach"></a>动态SQL_foreach</h2><p><code>&lt;foreach&gt;</code>类似JAVA中的for循环，可以遍历集合或数组。<code>&lt;foreach&gt;</code>有如下属性：</p><ul><li>collection：遍历的对象类型</li><li>open：开始的sql语句</li><li>close：结束的sql语句</li><li>separator：遍历每项间的分隔符</li><li>item：表示本次遍历获取的元素，遍历List、Set、数组时表示每项元素，遍历map时表示键值对的值。</li><li>index：遍历List、数组时表示遍历的索引，遍历map时表示键值对的键。</li></ul><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>我们使用<code>&lt;foreach&gt;</code>遍历数组进行批量删除。</p><ol><li><p>持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteBatch</span><span class="params">(<span class="keyword">int</span>[] ids)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>映射文件添加标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">S<span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a>遍历Map</h3><p>我们使用<code>&lt;foreach&gt;</code>遍历Map进行多条件查询。</p><ol><li><p>持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多条件查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map 查询的条件键值对 键：属性名 值：属性值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUser</span><span class="params">(<span class="meta">@Param(&quot;queryMap&quot;)</span> Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>映射文件添加标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;queryMap&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;and&quot;</span> <span class="attr">index</span>=<span class="string">&quot;key&quot;</span> <span class="attr">item</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">            $&#123;key&#125; = #&#123;value&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis配置文件</title>
      <link href="/2022/04/25/MyBatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2022/04/25/MyBatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis配置文件-properties"><a href="#MyBatis配置文件-properties" class="headerlink" title="MyBatis配置文件_properties"></a>MyBatis配置文件_properties</h2><p>MyBatis配置文件结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-configuration</span><br><span class="line">    -properties（属性）</span><br><span class="line">        -property</span><br><span class="line">    -settings（全局配置参数）</span><br><span class="line">        -setting</span><br><span class="line">    -plugins（插件）</span><br><span class="line">        -plugin</span><br><span class="line">    -typeAliases（别名）</span><br><span class="line">        -typeAliase</span><br><span class="line">        -package</span><br><span class="line">    -environments（环境）</span><br><span class="line">        -environment</span><br><span class="line">            -transactionManager（事务管理）</span><br><span class="line">            -dataSource（数据源）</span><br><span class="line">    -mappers（映射器）</span><br><span class="line">        -mapper</span><br><span class="line">        -package</span><br></pre></td></tr></table></figure><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>属性值定义。properties标签中可以定义属性值，也可以引入外部配置文件。无论是内部定义还是外部引入，都可以使用${name}获取值。</p><p>例如：我们可以将数据源配置写到外部的db.properties中，再使用properties标签引入外部配置文件，这样可以做到动态配置数据源。</p><ol><li><p>编写db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span></span><br><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>在配置文件中引入db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;properties</span> <span class="string">resource=&quot;db.properties&quot;&gt;&lt;/properties&gt;</span></span><br><span class="line"><span class="meta">&lt;environments</span> <span class="string">default=&quot;mysql&quot;&gt;</span></span><br><span class="line">    <span class="meta">&lt;environment</span> <span class="string">id=&quot;mysql&quot;&gt;</span></span><br><span class="line">     <span class="meta">&lt;transactionManager</span> <span class="string">type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;</span></span><br><span class="line">        <span class="meta">&lt;dataSource</span> <span class="string">type=&quot;POOLED&quot;&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span></span><br><span class="line">         <span class="meta">&lt;property</span> <span class="string">name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dataSource&gt;</span></span><br><span class="line">    <span class="attr">&lt;/environment&gt;</span></span><br><span class="line"><span class="attr">&lt;/environments&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>当然我们也可以将数据源数据通过<code>&lt;properties&gt;</code>配置到MyBatis配置文件内，但这样做没什么意义。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;properties&gt;</span></span><br><span class="line">    <span class="meta">&lt;property</span> <span class="string">name=&quot;jdbc.driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="meta">&lt;property</span> <span class="string">name=&quot;jdbc.url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="meta">&lt;property</span> <span class="string">name=&quot;jdbc.username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="meta">&lt;property</span> <span class="string">name=&quot;jdbc.password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="attr">&lt;/properties&gt;</span></span><br><span class="line"><span class="meta">&lt;environments</span> <span class="string">default=&quot;mysql&quot;&gt;</span></span><br><span class="line">    <span class="meta">&lt;environment</span> <span class="string">id=&quot;mysql&quot;&gt;</span></span><br><span class="line">        <span class="meta">&lt;transactionManager</span> <span class="string">type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;</span></span><br><span class="line">        <span class="meta">&lt;dataSource</span> <span class="string">type=&quot;POOLED&quot;&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dataSource&gt;</span></span><br><span class="line">    <span class="attr">&lt;/environment&gt;</span></span><br><span class="line"><span class="attr">&lt;/environments&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis配置文件-settings"><a href="#MyBatis配置文件-settings" class="headerlink" title="MyBatis配置文件_settings"></a>MyBatis配置文件_settings</h2><p><code>&lt;settings&gt;</code>是配置MyBatis运行时的一些行为的，例如缓存、延迟加载、命名规则等一系列控制性参数。后期我们会使用该标签配置缓存和延迟加载等。</p><h2 id="MyBatis配置文件-plugins"><a href="#MyBatis配置文件-plugins" class="headerlink" title="MyBatis配置文件_plugins"></a>MyBatis配置文件_plugins</h2><p><code>&lt;plugins&gt;</code>是配置MyBatis插件的。插件可以增强MyBatis功能，比如进行sql增强，打印日志，异常处理等。后期我们会使用该标签配置分页插件。</p><h2 id="MyBatis配置文件-typeAliases"><a href="#MyBatis配置文件-typeAliases" class="headerlink" title="MyBatis配置文件_typeAliases"></a>MyBatis配置文件_typeAliases</h2><p>MyBatis对常用类有默认别名支持，比如java.lang.Stirng的别名为string。除此之外，我们也可以使用<code>&lt;typeAliases&gt;</code>设置自定义别名。</p><h3 id="为一个类配置别名"><a href="#为一个类配置别名" class="headerlink" title="为一个类配置别名"></a>为一个类配置别名</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;typeAliases&gt;</span></span><br><span class="line">    <span class="meta">&lt;typeAlias</span> <span class="string">type=&quot;全类名&quot; alias=&quot;别名&quot;&gt;&lt;/typeAlias&gt;</span></span><br><span class="line"><span class="attr">&lt;/typeAliases&gt;</span></span><br></pre></td></tr></table></figure><p>此时我们即可在映射文件中使用自定义别名，如：</p><ol><li><p>配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;typeAliases&gt;</span></span><br><span class="line"><span class="meta">&lt;typeAlias</span> <span class="string">type=&quot;com.itbaizhan.pojo.User&quot; alias=&quot;User&quot;&gt;     &lt;/typeAlias&gt;</span></span><br><span class="line"><span class="attr">&lt;/typeAliases&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>映射文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;select</span> <span class="string">id=&quot;findAll&quot; resultType=&quot;User&quot;&gt;</span></span><br><span class="line">    <span class="attr">select</span> <span class="string">* from user</span></span><br><span class="line"><span class="attr">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="为一个所有包下的所有类配置别名"><a href="#为一个所有包下的所有类配置别名" class="headerlink" title="为一个所有包下的所有类配置别名"></a>为一个所有包下的所有类配置别名</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;typeAliases&gt;</span></span><br><span class="line">    <span class="meta">&lt;package</span> <span class="string">name=&quot;包名&quot;&gt;&lt;/package&gt;</span></span><br><span class="line"><span class="attr">&lt;/typeAliases&gt;</span></span><br></pre></td></tr></table></figure><p>此时该包下的所有类都有了别名，别名省略包名，和类名相同。如：</p><ol><li><p>配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;typeAliases&gt;</span></span><br><span class="line">    <span class="meta">&lt;package</span> <span class="string">name=&quot;com.itbaizhan.pojo&quot;&gt;&lt;/package&gt;</span></span><br><span class="line"><span class="meta">&lt;/typeAliases&gt;</span>    <span class="string"></span></span><br></pre></td></tr></table></figure></li><li><p>映射文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;select</span> <span class="string">id=&quot;findPage2&quot; resultType=&quot;User&quot; parameterType=&quot;PageQuery&quot;&gt;\</span></span><br><span class="line"><span class="string">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span></span><br><span class="line"><span class="attr">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="MyBatis配置文件-mappers"><a href="#MyBatis配置文件-mappers" class="headerlink" title="MyBatis配置文件_mappers"></a>MyBatis配置文件_mappers</h2><p><code>&lt;mappers&gt;</code>用于注册映射文件或持久层接口，只有注册的映射文件才能使用，共有四种方式都可以完成注册：</p><ol><li><p>使用相对路径注册映射文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;mappers&gt;</span></span><br><span class="line"><span class="meta">&lt;mapper</span> <span class="string">resource=&quot;com/itbaizhan/mapper/UserMapper.xml&quot;/&gt;</span></span><br><span class="line"><span class="attr">&lt;/mappers&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用绝对路径注册映射文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;mappers&gt;</span></span><br><span class="line"><span class="meta">&lt;mapper</span> <span class="string">url=&quot;file:///C:\Users\a\IdeaProjects\mybatiscase\mybatisDemo1\src\main\resources\com\itbaizhan\mapper\UserMapper.xml&quot;/&gt; </span></span><br><span class="line"><span class="attr">&lt;/mappers&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注册持久层接口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;mappers&gt;</span>   <span class="string"></span></span><br><span class="line"><span class="meta">&lt;mapper</span> <span class="string">class=&quot;com.itbaizhan.mapper.UserMapper&quot;/&gt; </span></span><br><span class="line"><span class="attr">&lt;/mappers&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注册一个包下的所有持久层接口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;mappers&gt;</span></span><br><span class="line">    <span class="meta">&lt;package</span> <span class="string">name=&quot;com.itbaizhan.mapper&quot;/&gt;</span></span><br><span class="line"><span class="meta">&lt;/mappers&gt;</span>    <span class="string"></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="MyBatis配置文件-sql-、include标签"><a href="#MyBatis配置文件-sql-、include标签" class="headerlink" title="MyBatis配置文件_sql 、include标签"></a>MyBatis配置文件_sql 、include标签</h2><p><code>&lt;sql&gt;</code>用来定义可重用的sql片段，通过<code>&lt;include&gt;</code>引入该片段</p><p>如：sql语句查询字段起与Pojo属性相同的别名，该sql片段就可以重用</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;sql</span> <span class="string">id=&quot;findAllField&quot;&gt;</span></span><br><span class="line">    <span class="attr">select</span> <span class="string">tid as id,tname as teachername</span></span><br><span class="line"><span class="attr">&lt;/sql&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;select</span> <span class="string">id=&quot;findAll&quot; resultType=&quot;Teacher&quot; &gt;</span></span><br><span class="line">    <span class="meta">&lt;include</span> <span class="string">refid=&quot;findAllField&quot;&gt;&lt;/include&gt;</span></span><br><span class="line">    <span class="attr">from</span> <span class="string">teacher</span></span><br><span class="line"><span class="attr">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis映射文件-特殊字符处理"><a href="#MyBatis映射文件-特殊字符处理" class="headerlink" title="MyBatis映射文件_特殊字符处理"></a>MyBatis映射文件_特殊字符处理</h2><p>在Mybatis映射文件中尽量不要使用一些特殊字符，如：<code>&lt;</code>，<code>&gt;</code>等。</p><p>我们可以使用符号的实体来表示：</p><table><thead><tr><th align="center">符号</th><th align="center">实体</th></tr></thead><tbody><tr><td align="center">&lt;</td><td align="center">&lt;</td></tr><tr><td align="center">&gt;</td><td align="center">&gt;</td></tr><tr><td align="center">&amp;</td><td align="center">&amp;</td></tr><tr><td align="center">‘</td><td align="center">&apos;</td></tr><tr><td align="center">“</td><td align="center">&quot;</td></tr></tbody></table><p>如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;select</span> <span class="string">id=&quot;findById2&quot; resultType=&quot;com.itbaizhan.pojo.Teacher&quot;&gt;</span></span><br><span class="line">    <span class="meta">&lt;include</span> <span class="string">refid=&quot;selectAllField&quot;&gt;&lt;/include&gt;</span></span><br><span class="line">    <span class="attr">from</span> <span class="string">teacher where tid &amp;gt; #&#123;id&#125;</span></span><br><span class="line"><span class="attr">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="/2021/09/27/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>/2021/09/27/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h1><p>好像有改变了，又好像没有。是在朝着心里预期的轨迹前行，但是对自己还有很大的不满，希望在接下来的这段时光里奋勇前行。弥补对自己的不满。</p><p>有梦想很好，但是我却说不出个梦想，只有我想要做什么，朝着方向去努力，我只知道我可以。梦想对我来说太大了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活小记</title>
      <link href="/2021/04/28/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/"/>
      <url>/2021/04/28/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="生活"><a href="#生活" class="headerlink" title="-生活"></a>-生活</h1><p>很高兴又能够记录自己了，我希望能够坚持下去。加油！</p><p>生活是一个沉重的话题，特别是对于我们马上要毕业却又不知所措的人来说。</p><p>对于这短短的三年，我们都有这很多的回忆，也会觉得时间过得太快了。三年转瞬即逝，对于接下来的人生我也做出了选择。我很害怕选择，有时候你甚至会怀疑自己的选择。我觉得这个选择让我背负了太多的期望和希望，我甚至不知道自己真实的选择到底是什么。</p><p>我很害怕选择，人生的路上最怕的就是岔路口，你不知道那一条是对的，你甚至不能够自己去做决定，你始终不是你一个人，生活也不是你一个人的生活。</p><p>这个选择带给了我很大的压力，时常让我觉得无法正确的面对。但是另一方面它也带给了我很大的动力。就像是善良和邪恶的小天使一样，互相斗争，互相吞噬，吞噬着我的思想，影响着我的行为。我的心情就像是过山车一样，时而激情澎湃，时而一潭死水，它又影响着我的行为，时而积极向上，时而懒惰颓废。</p><p>我很庆幸一直有她的陪伴，无论我在任何的情绪下，想到她就只有开心两个字能偶形容。或许我怀疑过很多我做出的选择，为之动摇。但是，她是我永远都不会动摇的选择。无论你们说什么，我从不为我做出的这一次选择而后悔。也许你们觉得我做出了错误的选择，但是她带给我心里的愉悦是不可取代的。</p><p>选择永远是一个人逃不开的事情，我一直认定，只要做出选择，就把它当作最正确的选择去努力，去证明。事实证明，我做不到，我还是时常会在心底里问自己这到底是不是你想要的。说到我想要的，连我自己都不知道我想要的是什么，生活在这个体制的社会里，我没有绝对独立的思想，我做不到抛开所有去追求我的选择。所以，我也说不出来我的选择到底是什么，或许我觉得你们想要我这样做，那我就不让你们失望，也或许我自己想要这样做，给自己一个交代。</p><p>我是一个心思比较重的人，我喜欢自己一个人想事情。我可以沉醉与一件事的想象，达到呆呆的傻笑的地步。我自己想事情的时候喜欢独处，独处真的很令人上瘾。我也喜欢干活的时候想事情，例如打扫卫生做饭。我不知道我的这种心理是否健康，我还没有到达关注是否健康的地步，因为还有生活摆在我面前。</p><h1 id="爱情"><a href="#爱情" class="headerlink" title="爱情"></a>爱情</h1><p>我可以很骄傲的说出我收获了爱情，或许你们会说我不懂得什么是爱情。是的，我的确不懂得什么是爱情。但是我知道和她在一起我是开心的。</p><p>她也是一个复杂的人，但是又是一个简单的人，总的来说就是复杂的生活下的一个承受了很多的简单的人。这也许是个病句，但是我相信只要她看到就知道我在说什么。我们的开始是很普通的。一天，一个以前从没有怎么说过话的女同学背着凳子和朋友一起坐到了我的桌子上听课并向我请教问题。作为一个自认为很有绅士风度的男同学当然是要尽心尽力的帮助同学，故事就是这样开始的，我已经忘记了我们刚开始聊的是什么了，或许是学习，或许是那时候的瞎扯淡。下次我问问她是否记得，人们不都说女孩子心细。从最初的相识到一发不可收拾，我不知道经历了什么，当初肯定没有现在的这份决心，或许是觉得她很特别，相处之后又有点觉得可怜，我觉得她总是外边开心，但是还有掩藏很深的情绪。当然是不好的情绪。当我抓住她的这缕情绪之后，我就想要改变她，想要她能够真正的快乐。因此我就一直自以为是的去帮助她变开心。自以为是不是我自己形容自己的，我记得这是她形容我的，还别说，我还挺喜欢这个词。</p><p>她是个没主见的人。我们是怎样确立关系的呢？好奇吧，是不是觉得我们这样感情深厚的一定是从一个浪漫的告白开始的。恭喜你，猜错了。我们关系的确立非常具有戏剧性，也是我遇上的是她，是别人就不会理我了。当我们的关系进一步升温的时候，我傻到和她说我那时候不想谈恋爱，还是在手机上发消息说的。现在想想就后悔，当然，我还是我，说过之后我就觉得不对劲了，之后我就和她表白了，应该是说过不想谈恋爱后没几分钟，我就说做我女朋友吧，她也反问我不是说不想谈恋爱吗？还好我脸皮厚，说是不想，但是奈何遇上了让我觉得是我应该守护一生的人，都不是值得守护一生了，是应该守护，守护她我是责无旁贷的。是不是觉得我很浪漫，嘿嘿。这是我杜撰的，我也忘记了当时是怎么回答了她的反问。反正我觉得我们能在一起，她的没有主见起了很大的作用。这也是我把她“骗”到手后最想要改变的一点。</p><p>我是那种理科直男又不是太直男的，反正我有个朋友她男朋友看了我俩聊天后夸我会说话，听她说她男朋友才是直男。我们之间的初期阶段也是不太理想的。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP入门</title>
      <link href="/2020/09/30/JSP%E5%85%A5%E9%97%A8/"/>
      <url>/2020/09/30/JSP%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP入门"><a href="#JSP入门" class="headerlink" title="JSP入门"></a>JSP入门</h1><p><code>Java Server Pages：</code> java服务器端页面</p><ul><li>可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</li><li>用于简化书写</li></ul><p><strong>原理：</strong></p><p>JSP本质上就是一个Servlet</p><p><strong>JSP的脚本：</strong>JSP定义Java代码的方式</p><ol><li>&lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</li><li>&lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。定义成员方法，成员变量。</li><li>&lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</li></ol><p><strong>JSP的内置对象：</strong>在jsp页面中不需要获取和创建，可以直接使用的对象</p><p>jsp一共有9个内置对象。</p><p>今天学习3个：</p><ul><li>request</li><li>response</li><li>out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似<ul><li>response.getWriter()和out.write()的区别：<ul><li>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</li><li>response.getWriter()数据输出永远在out.write()之前</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始既是结束</title>
      <link href="/2020/09/29/%E5%BC%80%E5%A7%8B%E6%97%A2%E6%98%AF%E7%BB%93%E6%9D%9F/"/>
      <url>/2020/09/29/%E5%BC%80%E5%A7%8B%E6%97%A2%E6%98%AF%E7%BB%93%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<p>​        今年开学就是大三了，这次开学，也就是结束。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开学了！</title>
      <link href="/2020/09/06/%E5%BC%80%E5%AD%A6%E4%BA%86%EF%BC%81/"/>
      <url>/2020/09/06/%E5%BC%80%E5%AD%A6%E4%BA%86%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="开学了！"><a href="#开学了！" class="headerlink" title="开学了！"></a>开学了！</h1><p>​        寒假到现在八个月了，终于又回到了学校。当然不是想学校，而是想亲爱的舍友们，好久没当爸爸了，确实非常想念他们。</p><p>​        乘坐早上五点的车，来到学校时也九点了。不争气的行李箱让我吃了不少苦头，还好，顺利到学校了。我是第一个到学校的，当然也得给儿子们打扫宿舍卫生。出乎意料的是，宿舍还算好，不潮湿，没有发霉的味道，没有出现网上说的任何好玩的时。除了有点味道，和走的时候差不多，还是那么温馨，熟悉。打开被子，很好，没有发霉，甚至没有味道，但是还是免不了晒一下。对象还给我买的有驱虫药，So sweet.</p><p>​        一直到中午，才有第二个人来。一起去吃过饭。又有人来了，来了就开始吹牛逼。还真是什么都没变，都是熟悉的味道，这感觉真好。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池</title>
      <link href="/2020/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2020/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个容器（集合），存放数据库连接的容器。</p><p>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完后，将连接对象归还给容器。</p><p>可以节约资源，不用每次都创建对象。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>标准接口：DataSource   javax.sql包下的</p><ol><li>方法：</li></ol><ul><li>获取连接：getConnection()</li></ul><ul><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li></ul><ol start="2"><li>一般我们不去实现它，有数据库厂商来实现<ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li></ol></li></ol><h3 id="C3P0：数据库连接池技术"><a href="#C3P0：数据库连接池技术" class="headerlink" title="C3P0：数据库连接池技术"></a>C3P0：数据库连接池技术</h3><p><strong>使用步骤：</strong></p><ol><li>导入jar包（两个）：<ul><li>c3p0-0.9.5.5.jar</li><li>mchange-commons-java-0.2.19.jar</li></ul></li><li>定义配置文件：<ul><li>名称：c3p0.properties 或者 c3p0-config.xml</li><li>配置文件路径：直接放在src目录下即可</li></ul></li><li>创建数据库连接池对象：ComboPooledDataSource</li><li>获取链接：getConnection</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建数据库连接池对象</span></span><br><span class="line">DataSource ds  = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"><span class="comment">//2. 获取连接对象</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure><h3 id="Druid：数据库连接池技术"><a href="#Druid：数据库连接池技术" class="headerlink" title="Druid：数据库连接池技术"></a>Druid：数据库连接池技术</h3><p><strong>由阿里巴巴提供（全世界性能最好的数据库连接池之一，中国NB）</strong></p><p><strong>使用步骤：</strong></p><ol><li>导入jar 包：druid-1.1.23.jar</li><li>定义配置文件：properties形式的，可以叫任意名，放在任意目录下</li><li>加载配置文件：Properties类 </li><li>获取数据库连接池对象：通过工厂来获取 DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol><p><strong>代码演示：</strong></p><p>配置文件：druid.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test1?&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数量</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><p><strong>连接池类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01_连接池.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * druid连接池演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//导入jar包</span></span><br><span class="line">        <span class="comment">//定义配置文件</span></span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = DruidDemo1.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line">        <span class="comment">//获取连接池对象</span></span><br><span class="line">        DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection conn = ds.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Druid连接池的工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01_连接池.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员变量 DataSource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            <span class="comment">//获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet resultSet,Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h2><p>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p><p><strong>使用步骤：</strong></p><ol><li>导入jar包</li><li>创建JDBCTemplate对象，依赖于数据源DataSource<ul><li>JdbcTemplate template = new JdbcTemplate(ds);</li></ul></li><li>调用JdbcTemplate的方法来完成CRUD的操作：<ul><li>update():执行DML语句。增、删、改语句</li><li>queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合</li><li>queryForList():查询结果将结果集封装为list集合</li><li>query():查询结果，将结果封装为JavaBean对象</li></ul></li></ol><p><strong>算了 这个我还没搞明白，以后再补充。</strong></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC基础</title>
      <link href="/2020/07/27/JDBC%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/07/27/JDBC%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC基础"><a href="#JDBC基础" class="headerlink" title="JDBC基础"></a>JDBC基础</h1><h2 id="SQL语言基础"><a href="#SQL语言基础" class="headerlink" title="SQL语言基础"></a>SQL语言基础</h2><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><ol><li>DDL(Data Definition Language)数据定义语言<pre><code> 用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</code></pre><ol start="2"><li>DML(Data Manipulation Language)数据操作语言<br> 用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</li><li>DQL(Data Query Language)数据查询语言<br> 用来查询数据库中表的记录(数据)。关键字：select, where 等</li><li>DCL(Data Control Language)数据控制语言(了解)<br> 用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</li></ol></li></ol><h3 id="DDL：操作数据库、表"><a href="#DDL：操作数据库、表" class="headerlink" title="DDL：操作数据库、表"></a>DDL：操作数据库、表</h3><ol><li><p>操作数据库：CRUD</p><ol><li><p>C(Create):创建</p><ul><li><p>创建数据库：</p><ul><li>create database 数据库名称;</li></ul></li><li><p>创建数据库，判断不存在，再创建：</p><ul><li>create database if not exists 数据库名称;</li></ul></li><li><p>创建数据库，并指定字符集</p><ul><li>create database 数据库名称 character set 字符集名;</li></ul></li><li><p>练习： 创建db4数据库，判断是否存在，并制定字符集为gbk</p><ul><li>create database if not exists db4 character set gbk;</li></ul></li></ul></li><li><p>R(Retrieve)：查询</p><ul><li>查询所有数据库的名称:<ul><li>show databases;</li></ul></li><li>查询某个数据库的字符集:查询某个数据库的创建语句<ul><li>show create database 数据库名称;</li></ul></li></ul></li><li><p>U(Update):修改</p><ul><li>修改数据库的字符集<ul><li>alter database 数据库名称 character set 字符集名称;</li></ul></li></ul></li><li><p>D(Delete):删除</p><ul><li>删除数据库<ul><li>drop database 数据库名称;</li></ul></li><li>判断数据库存在，存在再删除<ul><li>drop database if exists 数据库名称;</li></ul></li></ul></li><li><p>使用数据库</p><ul><li>查询当前正在使用的数据库名称<ul><li>select database();</li></ul></li><li>使用数据库<ul><li>use 数据库名称;</li></ul></li></ul></li></ol></li><li><p>操作表</p><ol><li><p>C(Create):创建</p><ol><li><p>语法：<br>create table 表名(</p><pre><code>列名1 数据类型1,列名2 数据类型2,....列名n 数据类型n</code></pre><p>);</p><ul><li><p>注意：最后一列，不需要加逗号（,）</p></li><li><p>数据库类型：</p><ol><li><p>int：整数类型</p><ul><li>age int,</li></ul></li><li><p>double:小数类型</p><ul><li>score double(5,2)</li></ul></li><li><p>date:日期，只包含年月日，yyyy-MM-dd</p></li><li><p>datetime:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss</p></li><li><p>timestamp:时间错类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss    </p><ul><li>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</li></ul></li><li><p>varchar：字符串</p><ul><li>name varchar(20):姓名最大20个字符</li><li>zhangsan 8个字符  张三 2个字符</li></ul></li></ol></li></ul></li></ol><ul><li>创建表<br>create table student(<pre><code>id int,name varchar(32),age int ,score double(4,1),birthday date,insert_time timestamp</code></pre>);</li><li>复制表：<ul><li>create table 表名 like 被复制的表名;          </li></ul></li></ul></li></ol></li><li><p>R(Retrieve)：查询</p><ul><li>查询某个数据库中所有的表名称<ul><li>show tables;</li></ul></li><li>查询表结构<ul><li>desc 表名;</li></ul></li></ul></li><li><p>U(Update):修改</p><ol><li>修改表名<br>alter table 表名 rename to 新的表名;</li><li>修改表的字符集<br>alter table 表名 character set 字符集名称;</li><li>添加一列<br>alter table 表名 add 列名 数据类型;</li><li>修改列名称 类型<br>alter table 表名 change 列名 新列别 新数据类型;<br>alter table 表名 modify 列名 新数据类型;</li><li>删除列<br>alter table 表名 drop 列名;</li></ol></li><li><p>D(Delete):删除</p><ul><li>drop table 表名;</li><li>drop table  if exists 表名 ;</li></ul></li></ol><h3 id="DML：增删改表中的数据"><a href="#DML：增删改表中的数据" class="headerlink" title="DML：增删改表中的数据"></a>DML：增删改表中的数据</h3><ol><li>添加数据：<ul><li>语法：<ul><li>insert into 表名（列名1,列名2，…列名n）values(值1，值2，…值n);</li><li><strong>注意：</strong><ul><li>列名和值要一一对应</li><li>如果表名后不定义列名，则默认给所有列添加值</li><li>除了数字类型，其它类型需要使用引号（单双都可以）引起来</li></ul></li></ul></li></ul></li><li>删除数据：<ul><li>语法：<ul><li>delete from 表名[where 条件]</li><li>注意：<ol><li>如果不加条件，则删除表中所有记录</li><li>如果要删除所有记录，两种方法：<ol><li>delete from 表名; – 不推荐使用，有多少条记录就会执行多少次删除操作</li><li>truncate table 表名; – 推荐使用，效率更高，先删除表，然后再创建一张一模一样的表。</li></ol></li></ol></li></ul></li></ul></li><li>修改数据：<ul><li>语法：<ul><li>update 表名 set 列名1 = 值1，列名2 = 值2，…[where 条件]</li><li>注意：<ul><li>如果不加条件，则会将表中所有记录全部修改。</li></ul></li></ul></li></ul></li></ol><h3 id="DQL：查询表中的数据"><a href="#DQL：查询表中的数据" class="headerlink" title="DQL：查询表中的数据"></a>DQL：查询表中的数据</h3><ul><li>select * from 表名;</li></ul><ol><li><p>语法：<br>select</p><pre><code>字段列表</code></pre><p>from</p><pre><code>表名列表</code></pre><p>where</p><pre><code>条件列表</code></pre><p>group by</p><pre><code>分组字段</code></pre><p>having</p><pre><code>分组之后的条件</code></pre><p>order by</p><pre><code>排序</code></pre><p>limit</p><pre><code>分页限定</code></pre></li><li><p>基础查询</p><ol><li>多个字段的查询<br>select 字段名1，字段名2… from 表名；<ul><li>注意：<ul><li>如果查询所有字段，则可以使用*来替代字段列表。</li></ul></li></ul></li><li>去除重复：<ul><li>distinct</li></ul></li><li>计算列<ul><li>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</li><li>ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null<ul><li>表达式1：哪个字段需要判断是否为null</li><li>如果该字段为null后的替换值。</li></ul></li></ul></li><li>起别名：<ul><li>as：as也可以省略</li></ul></li></ol></li><li><p>条件查询</p><ol><li><p>where子句后跟条件</p></li><li><p>运算符</p><ul><li><blockquote><p>、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;</p></blockquote></li><li><p>BETWEEN…AND  </p></li><li><p>IN( 集合) </p></li><li><p>LIKE：模糊查询</p><ul><li>占位符：<ul><li>_:单个任意字符</li><li>%：多个任意字符</li></ul></li></ul></li><li><p>IS NULL  </p></li><li><p>and  或 &amp;&amp;</p></li><li><p>or  或 || </p></li><li><p>not  或 !</p><p>– 查询年龄大于20岁</p><p>SELECT * FROM student WHERE age &gt; 20;</p><p>SELECT * FROM student WHERE age &gt;= 20;</p><p>– 查询年龄等于20岁<br>SELECT * FROM student WHERE age = 20;</p><p>– 查询年龄不等于20岁<br>SELECT * FROM student WHERE age != 20;<br>SELECT * FROM student WHERE age &lt;&gt; 20;</p><p>– 查询年龄大于等于20 小于等于30</p><p>SELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;<br>SELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;<br>SELECT * FROM student WHERE age BETWEEN 20 AND 30;</p><p>– 查询年龄22岁，18岁，25岁的信息<br>SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25<br>SELECT * FROM student WHERE age IN (22,18,25);</p><p>– 查询英语成绩为null<br>SELECT * FROM student WHERE english = NULL; – 不对的。null值不能使用 = （!=） 判断</p><p>SELECT * FROM student WHERE english IS NULL;</p><p>– 查询英语成绩不为null<br>SELECT * FROM student WHERE english  IS NOT NULL;</p><p>– 查询姓马的有哪些？ like<br>SELECT * FROM student WHERE NAME LIKE ‘马%’;<br>– 查询姓名第二个字是化的人</p><p>SELECT * FROM student WHERE NAME LIKE “_化%”;</p><p>– 查询姓名是3个字的人<br>SELECT * FROM student WHERE NAME LIKE ‘___’;<br>– 查询姓名中包含德的人<br>SELECT * FROM student WHERE NAME LIKE ‘%德%’;</p></li></ul></li></ol></li></ol><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h3><p><strong>MySQL8连接时的注意事项：</strong></p><ul><li>​    注册驱动从：”com.mysql.jdbc.Driver”变为”com.mysql.cj.jdbc.Driver”</li><li>url从：(“jdbc:mysql://localhost:3306/test1,”root”, “root”)变为(“jdbc:mysql://localhost:3306/test1?&amp;useSSL=false&amp;serverTimezone=UTC”, “root”, “root”)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01_JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//导入驱动jar包</span></span><br><span class="line">        <span class="comment">//注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//获取连接对象</span></span><br><span class="line">        Connection con = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test1?&amp;useSSL=false&amp;serverTimezone=UTC&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">//定义一个sql语句</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into stu1(id,name) values(1221,&#x27;小红&#x27;) &quot;</span>;</span><br><span class="line">        <span class="comment">//获取执行sql的对象 Statement</span></span><br><span class="line">        Statement statement = con.createStatement();</span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        <span class="keyword">int</span> i = statement.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//处理结果</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        con.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="详解各个对象"><a href="#详解各个对象" class="headerlink" title="详解各个对象"></a>详解各个对象</h3><ol><li><p><strong>DriverManage：驱动管理对象</strong></p><ul><li><p>功能：</p><ol><li><p>注册驱动</p><p>注册方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerDriver</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function"><span class="comment">//向 DriverManager 注册给定驱动程序。</span></span></span><br></pre></td></tr></table></figure><p>写代码使用：Class.forName(“com.mysql.cj.jdbc.Driver”);</p><p>通过查看源码发现：在com.mysql.cj.jdbc.Driver类中存在静态代码块</p></li><li><p>获取数据库连接</p></li></ol></li></ul></li><li><p><strong>Connection：数据库连接对象</strong></p><ul><li><p>功能：</p><ol><li><p>获取执行sql的对象</p><ul><li><p>Statement statement = con.createStatement();</p><p>创建一个 <code>Statement</code> 对象来将 SQL 语句发送到数据库。</p></li><li><p>PreparedStatement prepareStatement(String sql)</p></li></ul></li><li><p>事务管理：</p><ul><li><p>开启事务：</p><ul><li><p>setAutoCommit(boolean autoCommit) ：调用此方法设置参数为false，即开启事务</p><p>将此连接的自动提交模式设置为给定状态。</p></li></ul></li><li><p>提交事务：</p><ul><li>commit()</li></ul></li><li><p>回滚事务：</p><ul><li>rollback()</li></ul></li></ul></li></ol></li></ul></li><li><p><strong>Statement：执行sql的对象</strong></p></li><li><p><strong>ResultSet：结果集对象</strong></p></li><li><p><strong>PreparedStatement：执行sql的对象</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-Junit测试类</title>
      <link href="/2020/07/26/Java%E7%AC%94%E8%AE%B0-Junit%E6%B5%8B%E8%AF%95%E7%B1%BB/"/>
      <url>/2020/07/26/Java%E7%AC%94%E8%AE%B0-Junit%E6%B5%8B%E8%AF%95%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h1><h2 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h2><p><strong>黑盒测试：</strong>不需要写代码，输入值，看程序是否能够输出期望的值。</p><p><strong>白盒测试：</strong>需要写代码，关注具体程序的执行流程</p><p>Junit属于白盒测试</p><h2 id="Junit使用步骤"><a href="#Junit使用步骤" class="headerlink" title="Junit使用步骤"></a>Junit使用步骤</h2><ol><li>定义一个测试类：类名一般使用被测试类名＋Test</li><li>定义测试方法：可以独立运行，返回值为Void，参数为空参</li><li>给方法家注解@Test</li><li>导入junit依赖环境</li></ol><p><strong>判定测试结果：</strong></p><p>​    红色：失败</p><p>​    绿色：成功</p><p>​    一般不看输出是否对错，而使用断言操作判断结果：</p><p>​            Assert.assertEquals(期望的结果,运算的结果);</p><p>​    补充：</p><p>​            @Before：修饰的方法会在测试执行前被自动执行</p><p>​            @After：修饰的方法会在测试执行后被自动执行</p><p><strong>被测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01_Junit;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    计算器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a -  b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   <strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01_Junit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法：</span></span><br><span class="line"><span class="comment">     *      用于申请资源，所有测试方法在执行之前都会先执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源方法：</span></span><br><span class="line"><span class="comment">     *      与初始化方法对应，所有方法执行之后都会执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试add方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建计算器对象</span></span><br><span class="line">        Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="keyword">int</span> result = c.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//        System.out.println(result);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//断言： 我断言这个结果为3 判断对错</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Assert.assertEquals(3, result);</span></span><br><span class="line"><span class="comment">            前面为expected你的期望值</span></span><br><span class="line"><span class="comment">            后面为运行结果</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-缓冲流、转换流、序列化流</title>
      <link href="/2020/07/26/Java%E7%AC%94%E8%AE%B0-%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/"/>
      <url>/2020/07/26/Java%E7%AC%94%E8%AE%B0-%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="缓冲流、转换流、序列化流"><a href="#缓冲流、转换流、序列化流" class="headerlink" title="缓冲流、转换流、序列化流"></a>缓冲流、转换流、序列化流</h1><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>缓冲流是对四个基本字节流字符流的增强，先把字符或字节写入缓存，再由缓存刷入硬盘，效率更高，速度更快。和基本字节字符流对应：</p><ul><li>字节缓冲流：BufferedInputStream、BuffersdOutputStream</li><li>字符缓冲流：BufferedReader、BufferedWriter</li></ul><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字节缓冲输入流</span></span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;bis.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 创建字节缓冲输出流</span></span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;bos.txt&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public BufferedReader(Reader in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符缓冲输入流</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;br.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 创建字符缓冲输出流</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;bw.txt&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><ul><li>BufferedReader：<code>public String readLine()</code>: 读一行文字。 </li><li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。</li></ul><p><code>readLine</code>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// 创建流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;in.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 定义字符串,保存读取的一行文字</span></span><br><span class="line">        String line  = <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">// 循环读取,读取到最后返回null</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(line);</span><br><span class="line">            System.out.println(<span class="string">&quot;------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newLine</code>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedWriterDemo</span> <span class="title">throws</span> <span class="title">IOException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">      <span class="comment">// 创建流对象</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;out.txt&quot;</span>));</span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">        bw.write(<span class="string">&quot;黑马&quot;</span>);</span><br><span class="line">      <span class="comment">// 写出换行</span></span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;程序&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;员&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出效果:</span><br><span class="line">黑马</span><br><span class="line">程序</span><br><span class="line">员</span><br></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><h3 id="字符编码和字符集"><a href="#字符编码和字符集" class="headerlink" title="字符编码和字符集"></a>字符编码和字符集</h3><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p><p>编码表:生活中文字和计算机中二进制的对应规则</p><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><p>**字符集 <code>Charset</code>**：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p><ul><li><strong>ASCII字符集</strong> ：<ul><li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li></ul></li></ul><ul><li><strong>ISO-8859-1字符集</strong>：<ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul></li><li><strong>GBxxx字符集</strong>：<ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul></li></ul><ul><li><strong>Unicode字符集</strong> ：<ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li><li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li><li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。<ol start="2"><li>拉丁文等字符，需要二个字节编码。 <ol start="3"><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ol></li></ol></li></ul></li></ul><h4 id="编码引出的问题"><a href="#编码引出的问题" class="headerlink" title="编码引出的问题"></a>编码引出的问题</h4><p>在IDEA中，使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA的设置，都是默认的<code>UTF-8</code>编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><h5 id="InputStreamReader类"><a href="#InputStreamReader类" class="headerlink" title="InputStreamReader类"></a>InputStreamReader类</h5><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h6 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h6><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;in.txt&quot;</span>));</span><br><span class="line">InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;in.txt&quot;</span>) , <span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="指定编码读取"><a href="#指定编码读取" class="headerlink" title="指定编码读取"></a>指定编码读取</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 定义文件路径,文件为gbk编码</span></span><br><span class="line">        String FileName = <span class="string">&quot;E:\\file_gbk.txt&quot;</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(FileName));</span><br><span class="line">      <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(FileName) , <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"><span class="comment">// 定义变量,保存字符</span></span><br><span class="line">        <span class="keyword">int</span> read;</span><br><span class="line">      <span class="comment">// 使用默认编码字符流读取,乱码</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read); <span class="comment">// ��Һ�</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 使用指定编码字符流读取,正常解析</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr2.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read);<span class="comment">// 大家好</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="OutputStreamWriter类"><a href="#OutputStreamWriter类" class="headerlink" title="OutputStreamWriter类"></a>OutputStreamWriter类</h5><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><h6 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h6><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OutputStreamWriter isr = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;out.txt&quot;</span>));</span><br><span class="line">OutputStreamWriter isr2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;out.txt&quot;</span>) , <span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="指定编码写出"><a href="#指定编码写出" class="headerlink" title="指定编码写出"></a>指定编码写出</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 定义文件路径</span></span><br><span class="line">        String FileName = <span class="string">&quot;E:\\out.txt&quot;</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw.write(<span class="string">&quot;你好&quot;</span>); <span class="comment">// 保存为6个字节</span></span><br><span class="line">        osw.close();</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 定义文件路径</span></span><br><span class="line">String FileName2 = <span class="string">&quot;E:\\out2.txt&quot;</span>;</span><br><span class="line">     <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        OutputStreamWriter osw2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName2),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw2.write(<span class="string">&quot;你好&quot;</span>);<span class="comment">// 保存为4个字节</span></span><br><span class="line">        osw2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习：转换文件编码"><a href="#练习：转换文件编码" class="headerlink" title="练习：转换文件编码"></a>练习：转换文件编码</h4><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;      </span><br><span class="line">    <span class="comment">// 1.定义文件路径</span></span><br><span class="line">     String srcFile = <span class="string">&quot;file_gbk.txt&quot;</span>;</span><br><span class="line">        String destFile = <span class="string">&quot;file_utf8.txt&quot;</span>;</span><br><span class="line"><span class="comment">// 2.创建流对象</span></span><br><span class="line">    <span class="comment">// 2.1 转换输入流,指定GBK编码</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(srcFile) , <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.2 转换输出流,默认utf8编码</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(destFile));</span><br><span class="line"><span class="comment">// 3.读写数据</span></span><br><span class="line">    <span class="comment">// 3.1 定义数组</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 3.2 定义长度</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">    <span class="comment">// 3.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 循环写出</span></span><br><span class="line">          osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 4.释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。对象的数据、对象的类型和对象中存储的数据信息，都可以用来在内存中创建对象。</p><h4 id="ObjectOutputStream类"><a href="#ObjectOutputStream类" class="headerlink" title="ObjectOutputStream类"></a>ObjectOutputStream类</h4><ul><li><code>public ObjectOutputStream(OutputStream out) </code>： 创建一个指定OutputStream的ObjectOutputStream。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;employee.txt&quot;</span>);</span><br><span class="line">ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fileOut);</span><br></pre></td></tr></table></figure><h5 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h5><ol><li>一个对象要想序列化，必须满足两个条件:</li></ol><ul><li>该类必须实现<code>java.io.Serializable </code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> age; <span class="comment">// transient瞬态修饰成员,不会被序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addressCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Address  check : &quot;</span> + name + <span class="string">&quot; -- &quot;</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.写出对象方法</p><ul><li><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeDemo</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span>   </span>&#123;</span><br><span class="line">    Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">    e.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    e.address = <span class="string">&quot;beiqinglu&quot;</span>;</span><br><span class="line">    e.age = <span class="number">20</span>; </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 创建序列化流对象</span></span><br><span class="line">          ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;employee.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 写出对象</span></span><br><span class="line">        out.writeObject(e);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        out.close();</span><br><span class="line">        fileOut.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;Serialized data is saved&quot;</span>); <span class="comment">// 姓名，地址被序列化，年龄没有被序列化。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException i)   &#123;</span><br><span class="line">            i.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">Serialized data is saved</span><br></pre></td></tr></table></figure><h4 id="ObjectInputStream类"><a href="#ObjectInputStream类" class="headerlink" title="ObjectInputStream类"></a>ObjectInputStream类</h4><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 </p><h5 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h5><ul><li><code>public ObjectInputStream(InputStream in) </code>： 创建一个指定InputStream的ObjectInputStream。</li></ul><h5 id="反序列化操作1"><a href="#反序列化操作1" class="headerlink" title="反序列化操作1"></a>反序列化操作1</h5><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><ul><li><code>public final Object readObject ()</code> : 读取一个对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeserializeDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span>   </span>&#123;</span><br><span class="line">        Employee e = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 创建反序列化流</span></span><br><span class="line">             FileInputStream fileIn = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;employee.txt&quot;</span>);</span><br><span class="line">             ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(fileIn);</span><br><span class="line">             <span class="comment">// 读取一个对象</span></span><br><span class="line">             e = (Employee) in.readObject();</span><br><span class="line">             <span class="comment">// 释放资源</span></span><br><span class="line">             in.close();</span><br><span class="line">             fileIn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">             <span class="comment">// 捕获其他异常</span></span><br><span class="line">             i.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ClassNotFoundException c)  &#123;</span><br><span class="line">        <span class="comment">// 捕获类找不到异常</span></span><br><span class="line">             System.out.println(<span class="string">&quot;Employee class not found&quot;</span>);</span><br><span class="line">             c.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 无异常,直接打印输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + e.name);<span class="comment">// zhangsan</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Address: &quot;</span> + e.address); <span class="comment">// beiqinglu</span></span><br><span class="line">        System.out.println(<span class="string">&quot;age: &quot;</span> + e.age); <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong>  </p><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。</strong>发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li><li>该类包含未知数据类型 </li><li>该类没有可访问的无参数构造方法 </li></ul><p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 加入序列版本号</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">     <span class="keyword">public</span> String name;</span><br><span class="line">     <span class="keyword">public</span> String address;</span><br><span class="line">     <span class="comment">// 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> eid; </span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addressCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Address  check : &quot;</span> + name + <span class="string">&quot; -- &quot;</span> + address);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习：序列化集合"><a href="#练习：序列化集合" class="headerlink" title="练习：序列化集合"></a>练习：序列化集合</h4><ol><li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li><li>反序列化<code>list.txt</code> ，并遍历集合，打印对象信息。</li></ol><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建 学生对象</span></span><br><span class="line">Student student = <span class="keyword">new</span> Student(<span class="string">&quot;老王&quot;</span>, <span class="string">&quot;laow&quot;</span>);</span><br><span class="line">Student student2 = <span class="keyword">new</span> Student(<span class="string">&quot;老张&quot;</span>, <span class="string">&quot;laoz&quot;</span>);</span><br><span class="line">Student student3 = <span class="keyword">new</span> Student(<span class="string">&quot;老李&quot;</span>, <span class="string">&quot;laol&quot;</span>);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Student&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(student);</span><br><span class="line">arrayList.add(student2);</span><br><span class="line">arrayList.add(student3);</span><br><span class="line"><span class="comment">// 序列化操作</span></span><br><span class="line"><span class="comment">// serializ(arrayList);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化  </span></span><br><span class="line">ObjectInputStream ois  = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;list.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 读取对象,强转为ArrayList类型</span></span><br><span class="line">ArrayList&lt;Student&gt; list  = (ArrayList&lt;Student&gt;)ois.readObject();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++ )&#123;</span><br><span class="line">          Student s = list.get(i);</span><br><span class="line">        System.out.println(s.getName()+<span class="string">&quot;--&quot;</span>+ s.getPwd());</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serializ</span><span class="params">(ArrayList&lt;Student&gt; arrayList)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建 序列化流 </span></span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;list.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 写出对象</span></span><br><span class="line">oos.writeObject(arrayList);</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">oos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h3 id="PrintStream类"><a href="#PrintStream类" class="headerlink" title="PrintStream类"></a>PrintStream类</h3><h4 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h4><p><code>public PrintStream(String fileName)  </code>： 使用指定的文件名创建一个新的打印流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">&quot;ps.txt&quot;</span>)；</span><br></pre></td></tr></table></figure><h4 id="改变打印流向"><a href="#改变打印流向" class="headerlink" title="改变打印流向"></a>改变打印流向</h4><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，改变它的流向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 调用系统的打印流,控制台直接输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 创建打印流,指定文件的名称</span></span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">&quot;ps.txt&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 设置系统的打印流流向,输出到ps.txt</span></span><br><span class="line">        System.setOut(ps);</span><br><span class="line">      <span class="comment">// 调用系统的打印流,ps.txt中输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-字节流、字符流</title>
      <link href="/2020/07/24/Java%E7%AC%94%E8%AE%B0-%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81/"/>
      <url>/2020/07/24/Java%E7%AC%94%E8%AE%B0-%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="字节流、字符流"><a href="#字节流、字符流" class="headerlink" title="字节流、字符流"></a>字节流、字符流</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h2><p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li></ul><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 </li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li></ul><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p><h3 id="字节输出流（OutputStream）"><a href="#字节输出流（OutputStream）" class="headerlink" title="字节输出流（OutputStream）"></a>字节输出流（OutputStream）</h3><p><code>java.io.OutputStream </code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li><li><code>public void flush() </code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li><li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul><blockquote><p>小贴士：</p><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h4 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h4><p><code>java.io.FileOutputStream </code>类是文件输出流，用于将数据写出到文件。</p><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h5><ul><li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamConstructor</span> <span class="title">throws</span> <span class="title">IOException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="写出字节数据"><a href="#写出字节数据" class="headerlink" title="写出字节数据"></a><strong>写出字节数据</strong></h5><p><strong>1. 写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据，</p><p>代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fos.write(<span class="number">97</span>); <span class="comment">// 写出第1个字节</span></span><br><span class="line">      fos.write(<span class="number">98</span>); <span class="comment">// 写出第2个字节</span></span><br><span class="line">      fos.write(<span class="number">99</span>); <span class="comment">// 写出第3个字节</span></span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><p><strong>2. 写出字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据，</p><p>代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="string">&quot;你好！&quot;</span>.getBytes();</span><br><span class="line">      <span class="comment">// 写出字节数组数据</span></span><br><span class="line">      fos.write(b);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">你好！</span><br></pre></td></tr></table></figure><p><strong>3. 写出指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节，</p><p>代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">cd</span><br></pre></td></tr></table></figure><p><strong>数据追加续写</strong></p><p>经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？</p><ul><li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。  </li><li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。  </li></ul><p>这两个构造方法，参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;fos.txt&quot;</span>，<span class="keyword">true</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">文件操作前：cd</span><br><span class="line">文件操作后：cdabcde</span><br></pre></td></tr></table></figure><p><strong>写出换行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;fos.txt&quot;</span>);  </span><br><span class="line">      <span class="comment">// 定义字节数组</span></span><br><span class="line">      <span class="keyword">byte</span>[] words = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">      <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">          <span class="comment">// 写出一个字节</span></span><br><span class="line">            fos.write(words[i]);</span><br><span class="line">          <span class="comment">// 写出一个换行, 换行符号转成数组写出</span></span><br><span class="line">            fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><h3 id="字节输入流（InputStream）"><a href="#字节输入流（InputStream）" class="headerlink" title="字节输入流（InputStream）"></a>字节输入流（InputStream）</h3><p><code>java.io.InputStream </code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。    </li><li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。 </li><li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li></ul><h4 id="FileInputStream类"><a href="#FileInputStream类" class="headerlink" title="FileInputStream类"></a>FileInputStream类</h4><p><code>java.io.FileInputStream </code>类是文件输入流，从文件中读取字节。</p><h5 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h5><ul><li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 </li><li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamConstructor</span> <span class="title">throws</span> <span class="title">IOException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        FileInputStream fos = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileInputStream fos = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a><strong>读取字节数据</strong></h5><p><strong>读取字节</strong>：<code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 读取数据，返回一个字节</span></span><br><span class="line">        <span class="keyword">int</span> read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">      <span class="comment">// 读取到末尾,返回-1</span></span><br><span class="line">       read = fis.read();</span><br><span class="line">        System.out.println( read);</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>循环改进读取方式，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="keyword">int</span> b ；</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><p><strong>使用字节数组读取</strong>：<code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;read.txt&quot;</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">      <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="keyword">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">// 每次读取后,把数组变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(b));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">ed</span><br></pre></td></tr></table></figure><p>错误数据<code>d</code>，是由于最后一次读取时，只读取一个字节<code>e</code>，数组中，上次读取的数据没有被完全替换，所以要通过<code>len</code> ，获取有效的字节，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;read.txt&quot;</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">      <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="keyword">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(b，<span class="number">0</span>，len));<span class="comment">//  len 每次读取的有效字节个数</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">e</span><br></pre></td></tr></table></figure><h3 id="案例练习：图片复制"><a href="#案例练习：图片复制" class="headerlink" title="案例练习：图片复制"></a>案例练习：图片复制</h3><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Copy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 指定数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\test.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2 指定目的地</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;test_copy.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.读写数据</span></span><br><span class="line">        <span class="comment">// 2.1 定义数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 2.2 定义长度</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">// 2.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 2.4 写出数据</span></span><br><span class="line">            fos.write(b, <span class="number">0</span> , len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流的关闭原则：先开后关，后开先关。</p><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><h4 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h4><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。    </li><li><code>public int read()</code>： 从输入流读取一个字符。 </li><li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</li></ul><h5 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h5><p><code>java.io.FileReader </code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><h5 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h5><ul><li><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。   </li><li><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderConstructor</span> <span class="title">throws</span> <span class="title">IOException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h5><p><strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FRRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="keyword">int</span> b ；</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用字符数组读取</strong>：<code>read(char[] cbuf)</code>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FRRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">        <span class="keyword">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">         <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cbuf));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取有效的字符改进，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">        <span class="keyword">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h4><p><code>java.io.Writer </code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>void write(int c)</code> 写入单个字符。</li><li><code>void write(char[] cbuf) </code>写入字符数组。 </li><li><code>abstract  void write(char[] cbuf, int off, int len) </code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 </li><li><code>void write(String str) </code>写入字符串。 </li><li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li><li><code>void flush() </code>刷新该流的缓冲。  </li><li><code>void close()</code> 关闭此流，但要先刷新它。 </li></ul><h5 id="FileWriter类"><a href="#FileWriter类" class="headerlink" title="FileWriter类"></a>FileWriter类</h5><p><code>java.io.FileWriter </code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><h5 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h5><ul><li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。   </li><li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriterConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="写出数据"><a href="#写出数据" class="headerlink" title="写出数据"></a>写出数据</h5><p><strong>写出字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符数据，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fw.write(<span class="number">97</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">      fw.write(<span class="string">&#x27;b&#x27;</span>); <span class="comment">// 写出第2个字符</span></span><br><span class="line">      fw.write(<span class="string">&#x27;C&#x27;</span>); <span class="comment">// 写出第3个字符</span></span><br><span class="line">      fw.write(<span class="number">30000</span>); <span class="comment">// 写出第4个字符，中文编码表中30000对应一个汉字。</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        【注意】关闭资源时,与FileOutputStream不同。</span></span><br><span class="line"><span class="comment">       如果不关闭,数据只是保存到缓冲区，并未保存到文件。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// fw.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">abC田</span><br></pre></td></tr></table></figure><h5 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h5><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p><ul><li><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</li><li><code>close </code>:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 写出数据，通过flush</span></span><br><span class="line">        fw.write(<span class="string">&#x27;刷&#x27;</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        fw.write(<span class="string">&#x27;新&#x27;</span>); <span class="comment">// 继续写出第2个字符，写出成功</span></span><br><span class="line">        fw.flush();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出数据，通过close</span></span><br><span class="line">        fw.write(<span class="string">&#x27;关&#x27;</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fw.write(<span class="string">&#x27;闭&#x27;</span>); <span class="comment">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="写出数据-1"><a href="#写出数据-1" class="headerlink" title="写出数据"></a>写出数据</h5><p><strong>写出字符数组</strong> ：<code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据，用法类似FileOutputStream，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">char</span>[] chars = <span class="string">&quot;黑马程序员&quot;</span>.toCharArray();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出字符数组</span></span><br><span class="line">      fw.write(chars); <span class="comment">// 黑马程序员</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是&#x27;程&#x27;，两个字节，也就是&#x27;程序&#x27;。</span></span><br><span class="line">        fw.write(b,<span class="number">2</span>,<span class="number">2</span>); <span class="comment">// 程序</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>写出字符串</strong>：<code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串</span></span><br><span class="line">      String msg = <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出字符数组</span></span><br><span class="line">      fw.write(msg); <span class="comment">//黑马程序员</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是&#x27;程&#x27;，两个字节，也就是&#x27;程序&#x27;。</span></span><br><span class="line">        fw.write(msg,<span class="number">2</span>,<span class="number">2</span>);<span class="comment">// 程序</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>续写和换行</strong>：操作类似于FileOutputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象，可以续写数据</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>，<span class="keyword">true</span>);     </span><br><span class="line">      <span class="comment">// 写出字符串</span></span><br><span class="line">        fw.write(<span class="string">&quot;我叫&quot;</span>);</span><br><span class="line">      <span class="comment">// 写出换行</span></span><br><span class="line">      fw.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">      <span class="comment">// 写出字符串</span></span><br><span class="line">  fw.write(<span class="string">&quot;仝少坤&quot;</span>);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">我叫</span><br><span class="line">仝少坤</span><br></pre></td></tr></table></figure><h3 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h3><p>可以作为工具类的配置文件使用</p><p><code>public Properties()</code> :创建一个空的属性列表。</p><h5 id="基本的存储方法"><a href="#基本的存储方法" class="headerlink" title="基本的存储方法"></a>基本的存储方法</h5><ul><li><code>public Object setProperty(String key, String value)</code> ： 保存一对属性。  </li><li><code>public String getProperty(String key) </code> ：使用此属性列表中指定的键搜索属性值。</li><li><code>public Set&lt;String&gt; stringPropertyNames() </code> ：所有键的名称的集合。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建属性集对象</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 添加键值对元素</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;filename&quot;</span>, <span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;length&quot;</span>, <span class="string">&quot;209385038&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;location&quot;</span>, <span class="string">&quot;D:\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 打印属性集对象</span></span><br><span class="line">        System.out.println(properties);</span><br><span class="line">        <span class="comment">// 通过键,获取属性值</span></span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">&quot;filename&quot;</span>));</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">&quot;length&quot;</span>));</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">&quot;location&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历属性集,获取所有键的集合</span></span><br><span class="line">        Set&lt;String&gt; strings = properties.stringPropertyNames();</span><br><span class="line">        <span class="comment">// 打印键值对</span></span><br><span class="line">        <span class="keyword">for</span> (String key : strings ) &#123;</span><br><span class="line">          System.out.println(key+<span class="string">&quot; -- &quot;</span>+properties.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">&#123;filename=a.txt, length=<span class="number">209385038</span>, location=D:\a.txt&#125;</span><br><span class="line">a.txt</span><br><span class="line"><span class="number">209385038</span></span><br><span class="line">D:\a.txt</span><br><span class="line">filename -- a.txt</span><br><span class="line">length -- <span class="number">209385038</span></span><br><span class="line">location -- D:\a.txt</span><br></pre></td></tr></table></figure><p><code>public void load(InputStream inStream)</code>： 从字节输入流中读取键值对。</p><p>参数中使用了字节输入流，通过流对象，可以关联到某文件上，这样就能够加载文本中的数据了。文本数据格式:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filename</span>=<span class="string">a.txt</span></span><br><span class="line"><span class="attr">length</span>=<span class="string">209385038</span></span><br><span class="line"><span class="attr">location</span>=<span class="string">D:\a.txt</span></span><br></pre></td></tr></table></figure><p>加载代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建属性集对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 加载文本中信息到属性集</span></span><br><span class="line">        pro.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;read.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 遍历集合并打印</span></span><br><span class="line">        Set&lt;String&gt; strings = pro.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : strings ) &#123;</span><br><span class="line">          System.out.println(key+<span class="string">&quot; -- &quot;</span>+pro.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">filename -- a.txt</span><br><span class="line">length -- <span class="number">209385038</span></span><br><span class="line">location -- D:\a.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-递归</title>
      <link href="/2020/07/24/Java%E7%AC%94%E8%AE%B0-%E9%80%92%E5%BD%92/"/>
      <url>/2020/07/24/Java%E7%AC%94%E8%AE%B0-%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><strong>递归</strong>：指在当前方法内调用自己的这种现象。</li></ul><ul><li><p><strong>递归的分类:</strong></p><ul><li>递归分为两种，直接递归和间接递归。</li><li>直接递归称为方法自身调用自己。</li><li>间接递归可以A方法调用B方法，B方法调用C方法，C方法调用A方法。</li></ul></li><li><p><strong>注意事项</strong>：</p><ul><li>递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。</li><li>在递归中虽然有限定条件，但是递归次数不能太多。否则也会发生栈内存溢出。</li><li>构造方法,禁止递归</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01DiGui</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// a();</span></span><br><span class="line">b(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 3.构造方法,禁止递归</span></span><br><span class="line"><span class="comment"> * 编译报错:构造方法是创建对象使用的,不能让对象一直创建下去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Demo01DiGui</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//Demo01DiGui();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 2.在递归中虽然有限定条件，但是递归次数不能太多。否则也会发生栈内存溢出。</span></span><br><span class="line"><span class="comment"> * 4993</span></span><br><span class="line"><span class="comment"> * Exception in thread &quot;main&quot; java.lang.StackOverflowError</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="comment">//添加一个递归结束的条件,i==5000的时候结束</span></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">5000</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//结束方法</span></span><br><span class="line">&#125;</span><br><span class="line">b(++i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。 Exception in thread &quot;main&quot;</span></span><br><span class="line"><span class="comment"> * java.lang.StackOverflowError</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a方法&quot;</span>);</span><br><span class="line">a();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归的简单使用"><a href="#递归的简单使用" class="headerlink" title="递归的简单使用"></a>递归的简单使用</h2><h3 id="累加求和"><a href="#累加求和" class="headerlink" title="累加求和"></a>累加求和</h3><h4 id="计算1-n的和"><a href="#计算1-n的和" class="headerlink" title="计算1 ~ n的和"></a><strong>计算1 ~ n的和</strong></h4><p><strong>分析</strong>：num的累和 = num + (num-1)的累和，所以可以把累和的操作定义成一个方法，递归调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//计算1~num的和，使用递归完成</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">      <span class="comment">// 调用求和的方法</span></span><br><span class="line"><span class="keyword">int</span> sum = getSum(num);</span><br><span class="line">      <span class="comment">// 输出结果</span></span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过递归算法实现.</span></span><br><span class="line"><span class="comment">    参数列表:int </span></span><br><span class="line"><span class="comment">    返回值类型: int </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">      <span class="comment">/* </span></span><br><span class="line"><span class="comment">         num为1时,方法返回1,</span></span><br><span class="line"><span class="comment">         相当于是方法的出口,num总有是1的情况</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">          num不为1时,方法返回 num +(num-1)的累和</span></span><br><span class="line"><span class="comment">          递归调用getSum方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="keyword">return</span> num + getSum(num-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归求阶乘"><a href="#递归求阶乘" class="headerlink" title="递归求阶乘"></a>递归求阶乘</h3><h4 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h4><p><strong>阶乘</strong>：所有小于及等于该数的正整数的积。</p><p><strong>n的阶乘</strong>：n! = n * (n-1) <em>…</em> 3 * 2 * 1 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo</span> </span>&#123;</span><br><span class="line">  <span class="comment">//计算n的阶乘，使用递归完成</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">      <span class="comment">// 调用求阶乘的方法</span></span><br><span class="line">        <span class="keyword">int</span> value = getValue(n);</span><br><span class="line">      <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;阶乘为:&quot;</span>+ value);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过递归算法实现.</span></span><br><span class="line"><span class="comment">    参数列表:int </span></span><br><span class="line"><span class="comment">    返回值类型: int </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 1的阶乘为1</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        n不为1时,方法返回 n! = n*(n-1)!</span></span><br><span class="line"><span class="comment">          递归调用getValue方法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">        <span class="keyword">return</span> n * getValue(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归打印多级目录"><a href="#递归打印多级目录" class="headerlink" title="递归打印多级目录"></a>递归打印多级目录</h3><h4 id="结合File类，打印多级目录"><a href="#结合File类，打印多级目录" class="headerlink" title="结合File类，打印多级目录"></a>结合File类，打印多级目录</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 创建File对象</span></span><br><span class="line">        File dir  = <span class="keyword">new</span> File(<span class="string">&quot;D:\\aaa&quot;</span>);</span><br><span class="line">      <span class="comment">// 调用打印目录方法</span></span><br><span class="line">        printDir(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">printDir</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 获取子文件和目录</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">      <span class="comment">// 循环打印</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        判断:</span></span><br><span class="line"><span class="comment">        当是文件时,打印绝对路径.</span></span><br><span class="line"><span class="comment">        当是目录时,继续调用打印目录的方法,形成递归调用.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">              <span class="comment">// 是文件,输出文件绝对路径</span></span><br><span class="line">                System.out.println(<span class="string">&quot;文件名:&quot;</span>+ file.getAbsolutePath());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 是目录,输出目录绝对路径</span></span><br><span class="line">                System.out.println(<span class="string">&quot;目录:&quot;</span>+file.getAbsolutePath());</span><br><span class="line">              <span class="comment">// 继续遍历,调用printDir,形成递归</span></span><br><span class="line">                printDir(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结合File类判断方法，打印指定后缀文件"><a href="#结合File类判断方法，打印指定后缀文件" class="headerlink" title="结合File类判断方法，打印指定后缀文件"></a>结合File类判断方法，打印指定后缀文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testRecursive03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    递归打印多级目录</span></span><br><span class="line"><span class="comment">    只要.exe结尾的文件</span></span><br><span class="line"><span class="comment">        1.使用判断只取.exe结尾文件</span></span><br><span class="line"><span class="comment">        2.使用过滤器：java.io.FileFilter接口里有一个抽象方法</span></span><br><span class="line"><span class="comment">        boolean accept(File pathname) 测试指定抽象路径名是否应该包含在某个路径名列表中。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        java.io.FilenameFilter接口里有一个抽象方法</span></span><br><span class="line"><span class="comment">        boolean accept(File dir, String name)测试指定文件是否应该包含在某一文件列表中。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            File[] listFiles(FileFilter filter)</span></span><br><span class="line"><span class="comment">            返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件。</span></span><br><span class="line"><span class="comment">            File[] listFiles(FilenameFilter filter)</span></span><br><span class="line"><span class="comment">            返回抽象路径名数组，这些路径名表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。</span></span><br><span class="line"><span class="comment">        注意：两个过滤器没有实现类，需要我们自己写实现类，重写 过滤方法accept，</span></span><br><span class="line"><span class="comment">            在方法中自己定义过滤的规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRecursive</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">&quot;E:\\chrome下载&quot;</span>);</span><br><span class="line">        TestDirectory(dir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestDirectory</span><span class="params">(File dir)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取子文件和目录  .listFiles()方法 返回值为File[],需要遍历的出结果</span></span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FileFilterImp());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        判断：</span></span><br><span class="line"><span class="comment">            当文件是文件时，打印绝对路径</span></span><br><span class="line"><span class="comment">            当文件是文件夹时，使用递归调用自己，继续判断并打印</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="comment">//进行判断</span></span><br><span class="line">            <span class="keyword">if</span> (file.isFile())&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(file);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(file);</span><br><span class="line">                TestDirectory(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-File类</title>
      <link href="/2020/07/24/Java%E7%AC%94%E8%AE%B0-File%E7%B1%BB/"/>
      <url>/2020/07/24/Java%E7%AC%94%E8%AE%B0-File%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="File类-1"><a href="#File类-1" class="headerlink" title="File类"></a>File类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>java.io.File</code> 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public File(String pathname) </code> ：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例。  </li><li><code>public File(String parent, String child) </code> ：从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</li><li><code>public File(File parent, String child)</code> ：从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例。  </li></ul><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径名</span></span><br><span class="line">String pathname = <span class="string">&quot;D:\\aaa.txt&quot;</span>;</span><br><span class="line">File file1 = <span class="keyword">new</span> File(pathname); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件路径名</span></span><br><span class="line">String pathname2 = <span class="string">&quot;D:\\aaa\\bbb.txt&quot;</span>;</span><br><span class="line">File file2 = <span class="keyword">new</span> File(pathname2); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过父路径和子路径字符串</span></span><br><span class="line"> String parent = <span class="string">&quot;d:\\aaa&quot;</span>;</span><br><span class="line"> String child = <span class="string">&quot;bbb.txt&quot;</span>;</span><br><span class="line"> File file3 = <span class="keyword">new</span> File(parent, child);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过父级File对象和子路径字符串</span></span><br><span class="line">File parentDir = <span class="keyword">new</span> File(<span class="string">&quot;d:\\aaa&quot;</span>);</span><br><span class="line">String child = <span class="string">&quot;bbb.txt&quot;</span>;</span><br><span class="line">File file4 = <span class="keyword">new</span> File(parentDir, child);</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>一个File对象代表硬盘中实际存在的一个文件或者目录。</li><li>无论该路径下是否存在文件或者目录，都不影响File对象的创建。</li></ol><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><p><code>public String getAbsolutePath() </code> ：返回此File的绝对路径名字符串。</p></li><li><p><code>public String getPath()</code> ：将此File转换为路径名字符串。 </p></li><li><p><code>public String getName()</code>  ：返回由此File表示的文件或目录的名称。  </p></li><li><p><code>public long length()</code>  ：返回由此File表示的文件的长度。 </p><p>方法演示，代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileGet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;d:/aaa/bbb.java&quot;</span>);     </span><br><span class="line">        System.out.println(<span class="string">&quot;文件绝对路径:&quot;</span>+f.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件构造路径:&quot;</span>+f.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名称:&quot;</span>+f.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件长度:&quot;</span>+f.length()+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line"></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;d:/aaa&quot;</span>);     </span><br><span class="line">        System.out.println(<span class="string">&quot;目录绝对路径:&quot;</span>+f2.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录构造路径:&quot;</span>+f2.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录名称:&quot;</span>+f2.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录长度:&quot;</span>+f2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">文件绝对路径:d:\aaa\bbb.java</span><br><span class="line">文件构造路径:d:\aaa\bbb.java</span><br><span class="line">文件名称:bbb.java</span><br><span class="line">文件长度:<span class="number">636</span>字节</span><br><span class="line"></span><br><span class="line">目录绝对路径:d:\aaa</span><br><span class="line">目录构造路径:d:\aaa</span><br><span class="line">目录名称:aaa</span><br><span class="line">目录长度:<span class="number">4096</span></span><br></pre></td></tr></table></figure><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><ul><li><strong>绝对路径</strong>：从盘符开始的路径，这是一个完整的路径。</li><li><strong>相对路径</strong>：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilePath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// D盘下的bbb.java文件</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;D:\\bbb.java&quot;</span>);</span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 项目下的bbb.java文件</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;bbb.java&quot;</span>);</span><br><span class="line">        System.out.println(f2.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">D:\bbb.java</span><br><span class="line">D:\idea_project_test4\bbb.java</span><br></pre></td></tr></table></figure><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul><li><code>public boolean exists()</code> ：此File表示的文件或目录是否实际存在。</li><li><code>public boolean isDirectory()</code> ：此File表示的是否为目录。</li><li><code>public boolean isFile()</code> ：此File表示的是否为文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileIs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;d:\\aaa\\bbb.java&quot;</span>);</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\aaa&quot;</span>);</span><br><span class="line">      <span class="comment">// 判断是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d:\\aaa\\bbb.java 是否存在:&quot;</span>+f.exists());</span><br><span class="line">        System.out.println(<span class="string">&quot;d:\\aaa 是否存在:&quot;</span>+f2.exists());</span><br><span class="line">      <span class="comment">// 判断是文件还是目录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d:\\aaa 文件?:&quot;</span>+f2.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;d:\\aaa 目录?:&quot;</span>+f2.isDirectory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">d:\aaa\bbb.java 是否存在:<span class="keyword">true</span></span><br><span class="line">d:\aaa 是否存在:<span class="keyword">true</span></span><br><span class="line">d:\aaa 文件?:<span class="keyword">false</span></span><br><span class="line">d:\aaa 目录?:<span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h3><ul><li><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。 </li><li><code>public boolean delete()</code> ：删除由此File表示的文件或目录。  </li><li><code>public boolean mkdir()</code> ：创建由此File表示的目录。</li><li><code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCreateDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 文件的创建</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;aaa.txt&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在:&quot;</span>+f.exists()); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否创建:&quot;</span>+f.createNewFile()); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在:&quot;</span>+f.exists()); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 目录的创建</span></span><br><span class="line">      File f2= <span class="keyword">new</span> File(<span class="string">&quot;newDir&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在:&quot;</span>+f2.exists());<span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否创建:&quot;</span>+f2.mkdir());<span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在:&quot;</span>+f2.exists());<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多级目录</span></span><br><span class="line">      File f3= <span class="keyword">new</span> File(<span class="string">&quot;newDira\\newDirb&quot;</span>);</span><br><span class="line">        System.out.println(f3.mkdir());<span class="comment">// false</span></span><br><span class="line">        File f4= <span class="keyword">new</span> File(<span class="string">&quot;newDira\\newDirb&quot;</span>);</span><br><span class="line">        System.out.println(f4.mkdirs());<span class="comment">// true</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 文件的删除</span></span><br><span class="line">       System.out.println(f.delete());<span class="comment">// true</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 目录的删除</span></span><br><span class="line">        System.out.println(f2.delete());<span class="comment">// true</span></span><br><span class="line">        System.out.println(f4.delete());<span class="comment">// false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//delete方法，如果此File表示目录，则目录必须为空才能删除。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="目录的遍历"><a href="#目录的遍历" class="headerlink" title="目录的遍历"></a>目录的遍历</h3><ul><li><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</li></ul><ul><li><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    File类遍历（文件夹）目录功能</span></span><br><span class="line"><span class="comment">    - public String[] list():返回一个String数组，表示该File目录中的所有子文件或目录</span></span><br><span class="line"><span class="comment">    - public File[] listFiles():返回一个File数组，表示该File目录中的所有子文件或目录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注意：</span></span><br><span class="line"><span class="comment">        list方法和listFiles方法遍历的是构造方法中给出的目录</span></span><br><span class="line"><span class="comment">        如果构造方法中给出的目录的路径不存在，会抛出空指针异常</span></span><br><span class="line"><span class="comment">        如果构造方法中给出的路径不是一个目录，也会抛出空指针异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        show01();</span></span><br><span class="line">        show02();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        - public File[] listFiles():返回一个File数组，表示该File目录中的所有子文件或目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\text&quot;</span>);</span><br><span class="line">        File[] files = f2.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历File数组</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        - public String[] list():返回一个String数组，表示该File目录中的所有子文件或目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\text&quot;</span>);</span><br><span class="line">        String[] list = f1.list();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑美化与效率</title>
      <link href="/2020/07/21/%E7%94%B5%E8%84%91%E7%BE%8E%E5%8C%96%E4%B8%8E%E6%95%88%E7%8E%87/"/>
      <url>/2020/07/21/%E7%94%B5%E8%84%91%E7%BE%8E%E5%8C%96%E4%B8%8E%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<h1 id="电脑美化与效率"><a href="#电脑美化与效率" class="headerlink" title="电脑美化与效率"></a>电脑美化与效率</h1><p><strong>大多都是我的使用习惯，供参考。</strong></p><h2 id="美化篇"><a href="#美化篇" class="headerlink" title="美化篇"></a>美化篇</h2><h3 id="1-Fences-3"><a href="#1-Fences-3" class="headerlink" title="1. Fences 3"></a>1. Fences 3</h3><p><strong>作用：</strong>在桌面上创建分区，对文件图标进行收纳整理，也可以作为效率篇工具。有多种自定义选项。</p><img src="https://s1.ax1x.com/2020/07/19/UWbQWn.png" alt="UWbQWn.png" style="zoom:50%;" /><p>它可以使你的桌面上没有任何图标，效果图（最上面一行小字就是效果，鼠标放上去自动展开），开机自启，占用极低，日常就感觉不到它的存在。</p><p>​                                <img src="https://s1.ax1x.com/2020/07/19/UWbI6P.md.png" alt="UWbI6P.md.png" style="zoom: 80%;" /></p><p><strong>获取途径：</strong></p><ol><li><p>​    steam平台购买：37元</p></li><li><p>白嫖党（破解版）：</p><p>百度网盘：链接：<a href="https://pan.baidu.com/s/16vgFk2QECGd1cs41xdoBvA">https://pan.baidu.com/s/16vgFk2QECGd1cs41xdoBvA</a> </p><pre><code>                提取码：anl3 </code></pre></li></ol><h3 id="2-BitDock"><a href="#2-BitDock" class="headerlink" title="2. BitDock"></a>2. BitDock</h3><p><strong>作用：</strong>在桌面创建dock栏（像苹果电脑的那种），桌面小工具，等。具体介绍可以看官网</p><p><strong>官网：</strong><a href="http://www.bitdock.cn/#home">http://www.bitdock.cn/#home</a></p><p>下载也在官网</p><p>同种类型的软件还有很多，但是，我觉得这个比较稳定。其实我自己并不会用它的dock栏，我只用了它的桌面小工具。所以，我下载了绿色版（官网下载时可以选择），然后把其它功能都删除，只留下了桌面小工具（如图左上角时间和右下角资源检测显示），大家可以自由发挥。</p><img src="https://s1.ax1x.com/2020/07/19/UWbI6P.md.png" alt="UWbI6P.md.png" style="zoom: 80%;" /><h3 id="3-任务栏透明"><a href="#3-任务栏透明" class="headerlink" title="3. 任务栏透明"></a>3. 任务栏透明</h3><p>这个想必大家都知道吧：TranslucentTB</p><p><strong>下载：</strong>微软商店（你说不知道什么是微软商店，对不起，我帮不了你）直接搜，有两个版本，一个官方版（全英文            警告），一个汉化版。</p><h3 id="4-Specinker"><a href="#4-Specinker" class="headerlink" title="4. Specinker"></a>4. Specinker</h3><p><strong>作用：</strong>在桌面添加随音乐律动的频谱，我只是试了一下，觉得有点花里胡哨，给卸载了，但是效果很棒。雨滴也可            以实现，但是很难，对小白非常不友好，这个还是很简单的。</p><p><strong>下载介绍及使用方式：</strong>参考大佬，<a href="https://blog.csdn.net/qq_40946921/article/details/104124455">https://blog.csdn.net/qq_40946921/article/details/104124455</a></p><img src="https://s1.ax1x.com/2020/07/19/UfCYmd.jpg" alt="UfCYmd.jpg" style="zoom: 33%;" /><p>就是时间上方那种，当然有很多选项可选，形状，色彩（有渐变色），粗细等等。</p><h2 id="效率篇"><a href="#效率篇" class="headerlink" title="效率篇"></a>效率篇</h2><h3 id="1-listary"><a href="#1-listary" class="headerlink" title="1. listary"></a>1. listary</h3><p><strong>作用：</strong></p><ul><li>全局搜索，双击Ctrl调出搜索栏，搜索内容包括本地磁盘所有，搜索程序直接启动，网络搜索支持很多搜索引擎，只要在搜索前面加上首字母缩写，如：bd listary</li><li>文件夹搜索，这个功能超好用，这是我一直没有换同类型产品的原因，打开文件夹，直接打字，不用打开任何东西，就能搜索你打的内容。还有例如你要在浏览器上保存一张图片，点击图片另存为之后会让你选择文件夹，它会直接在下面显示一个搜索框，可以直接搜索指定的文件夹，不用一个个找。</li></ul><p><strong>下载：</strong>官网下载：<a href="https://www.listarypro.com/download">https://www.listarypro.com/download</a></p><p>同类型产品：wox配合Everything（我试了，虽然好看，但是占用资源比listary多）、utool（功能最多，很多很好用的插件，但是同样也占资源多）</p><h3 id="2-Snipaste"><a href="#2-Snipaste" class="headerlink" title="2. Snipaste"></a>2. Snipaste</h3><p><strong>作用：</strong>截图，贴图。不多说，就是好用。</p><p><strong>下载：</strong>微软商店直接搜索下载</p><h3 id="3-Quick-Look"><a href="#3-Quick-Look" class="headerlink" title="3. Quick Look"></a>3. Quick Look</h3><p><strong>功能：</strong>在资源管理器里，点击文件按空格键，不用打开，就可以预览文件，支持超多格式，ps项目文件也可以，            如果有没支持到的格式，还可以百度搜插件及安装插件教程。</p><p><strong>下载：</strong>微软商店直接搜索下载</p><h3 id="4-Mem-Reduct"><a href="#4-Mem-Reduct" class="headerlink" title="4. Mem Reduct"></a>4. Mem Reduct</h3><p><strong>功能：</strong>内存清理，代替我联想管家的加速球，清理策略更强，可以定时清理，定量清理，让你时刻保持最佳状态，            放心，不会清理使用中的后台。只在任务栏显示一个小的数字。</p><p><strong>下载：</strong>百度网盘：.exe是安装版，.zip是免安装版，免安装版只需解压到你想放的文件夹，打开里面的.exe文件就            行。我遇到了免安装版不能开机启动的小毛病，所以换了安装版。</p><p>​                链接：<a href="https://pan.baidu.com/s/1dqn9JRImqv4dPzItDTqpvg">https://pan.baidu.com/s/1dqn9JRImqv4dPzItDTqpvg</a> </p><p>​                提取码：i96d </p>]]></content>
      
      
      <categories>
          
          <category> 电脑软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美化 </tag>
            
            <tag> 电脑软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC工具类</title>
      <link href="/2020/07/10/JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2020/07/10/JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC工具类"><a href="#JDBC工具类" class="headerlink" title="JDBC工具类"></a>JDBC工具类</h1><p>目的：简化代码书写</p><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件，只需要读取一次就可以拿到所有值，使用静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取文件，获取值</span></span><br><span class="line">            <span class="comment">//创建Properties</span></span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取src路径下的文件方式----&gt;ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL resource = classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            String path = resource.getPath();</span><br><span class="line"><span class="comment">//            System.out.println(path);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//加载文件</span></span><br><span class="line">            properties.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">            <span class="comment">//读取文件 赋值</span></span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>连接对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 通过配置文件传递参数</span></span><br><span class="line"><span class="comment">     * 配置文件：</span></span><br><span class="line"><span class="comment">     * jdbc.properties</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement statement, Connection connection)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet resultSet,Statement statement, Connection connection)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建配置文件：jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///test2?&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>在使用JDBC创建项目时就能使用工具类调用方法来代替大串的代码，并且改变数据库的连接只需要改动配置文件，不需要改动代码。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC 入门</title>
      <link href="/2020/07/09/JDBC%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/07/09/JDBC%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC入门"><a href="#JDBC入门" class="headerlink" title="JDBC入门"></a>JDBC入门</h1><ol><li><p><strong>概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库</strong></p></li><li><p><strong>本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</strong></p></li><li><p><strong>Java语言操作MySQL数据库快速入门：</strong></p><p>步骤：</p><ol><li><p>​    导入驱动jar包：各个mysql数据库版本对应版本号的驱动jar包，例如：我安装的是mysqsl-8.0.20版的mysql数据库，所以我使用的jar包就是  mysql-connector-java-8.0.20.jar。</p><p>导入方法：在项目里创建libs文件夹，直接把mysql-connector-java-8.0.20.jar复制到里面，然后右键jar包，点击Add As Library。</p></li><li><p>注册驱动：</p><p>​    Class.forName(“com.mysql.cj.jdbc.Driver”);</p><p>也可以不写，jar包里自带有注册驱动</p></li><li><p>获取连接对象 Connection</p></li><li><p>定义sql语句</p></li><li><p>获取执行sql语句的对象Statement</p></li><li><p>执行sql，接收返回结果</p></li><li><p>处理结果</p></li><li><p>释放资源</p></li></ol></li><li><p><strong>代码实现：</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//导入驱动jar包</span></span><br><span class="line">        <span class="comment">//注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//获取连接对象</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test1?&amp;useSSL=false&amp;serverTimezone=UTC&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        <span class="comment">//定义一个sql语句</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into stu1(id,name) values(1221,&#x27;小红&#x27;) &quot;</span>;</span><br><span class="line">        <span class="comment">//获取执行sql的对象 Statement</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        <span class="keyword">int</span> i = statement.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//处理结果</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>解释</strong></p><ol><li><p>DriverManager：驱动管理对象</p><ul><li><p>功能：</p><ul><li><p>注册驱动：告诉程序该使用哪个数据库驱动jar</p></li><li><p>jdk解释：</p><p>static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager </p></li><li><p>写代码使用：Class.forName(“com.mysql.cj.jdbc.Driver”);</p><ul><li>注意：mysql8需要在  .mysql.后加cj</li><li>注意：mysql5之后可以不写</li></ul></li></ul></li></ul></li><li><p>获取数据库连接：</p><ul><li><p>方法：static Connection getConnection(String url, String user, String password)</p></li><li><p>参数：</p><ul><li><p>url：指定连接路径，就是你需要连接的数据库地址</p><ul><li><p>语法：jdbc:mysql://ip地址(域名):端口号/数据库名称</p></li><li><p>mysql8之后的数据库需要在数据库名后加上：?&amp;useSSL=false&amp;serverTimezone=UTC</p><p>例：jdbc:mysql://localhost:3306/test1?&amp;useSSL=false&amp;serverTimezone=UTC</p></li><li><p>注意：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称</p></li></ul></li><li><p>user：用户名，mysql的用户名</p></li><li><p>password：密码，用户名对应的密码</p></li></ul></li></ul></li><li><p>Connection：数据库连接对象</p><ul><li>获取执行sql语句的对象 有两种<ul><li>Statement createStatement()</li><li>PreparedStatement prepareStatement(String sql)</li></ul></li></ul></li><li><p>Statement：执行sql的对象</p><ul><li>boolean execute(String sql) ：可以执行任意的sql </li><li>int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句，返回值为int类型，表示影响的行数</li><li>ResultSet executeQuery(String sql)  ：执行DQL（select)语句</li></ul></li><li><p>释放资源：避免内存泄漏</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>得奖了！得奖啦！</title>
      <link href="/2020/07/09/%E5%BE%97%E5%A5%96%E4%BA%86%EF%BC%81%E5%BE%97%E5%A5%96%E5%95%A6%EF%BC%81/"/>
      <url>/2020/07/09/%E5%BE%97%E5%A5%96%E4%BA%86%EF%BC%81%E5%BE%97%E5%A5%96%E5%95%A6%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="获奖感言"><a href="#获奖感言" class="headerlink" title="获奖感言"></a>获奖感言</h1><p>​        感谢大家，我很荣幸获得这次大赛的三等奖，感谢我的老师，我的朋友，我的同学。虽然我也不知道是什么比赛，也不是我得的奖，但是，我还是很高兴和大家分享。</p><p>​        言归正传，得奖的是我的女朋友，我也不知道是什么比赛，也看不懂证书，我就能看懂上面的俩字，我对象的名字。下面是证书。</p><img src="https://s1.ax1x.com/2020/07/09/UnG8n1.jpg" alt="UnG8n1.jpg" style="zoom: 15%;" /><p>​        至于我为什么这么激动，很大原因是因为我家的这只小懒猪太懒了。但是竟然得了个证书，这是让我意想不到的，为了感慨，我含泪（放心，医院的网速很快）写下了这篇文章。</p><p>​        下面，就让我来说说我的小懒猪吧。从我们俩在一起之后我有记忆的一个个暑假和寒假说起。猪：“哥，这个暑假我要减肥”，我：“好的宝贝，我支持你，我可以帮你列个计划表。”，猪：“好的哥，我一定要减下去，我要穿美美的裙子，吊带，露脐装”。这几乎是每个假期前夕我们俩的“会晤”，仿佛我已经看到了她瘦下来的样子，她穿着漂亮的裙子向我跑来。但是，现实是如此的残酷，因为一些众所周知的原因，我们还不能住在一起。所以，当放假之后，我问起她减肥情况的时候，她好像换了一个人似的，什么决心，什么吊带都没有床舒服。上午：我：“猪猪，在干啥”，猪：“床上，还没起床”，中午：我：“吃饭了吗？”  猪：“起床吃午饭了”。？？？早饭呢？下午，我：“午休吗？”  猪：“不。”  我：“那你干啥呢？”  猪：“床上躺呢。”  ？？？穿上躺不就是午休么？晚上，我：“晚上啦猪，是不是该做点什么了。”  猪：“是的，上号吧，我辅助。”  ？？？锻炼还需要辅助吗？我家猪真棒！！！</p><p>​        尽管我家猪还没有开始减肥，但是，我丝毫不怀疑她会减肥，因为到时候我们住在一起了我会逼他，哈哈哈🙃🙃🙃。不管她多么懒，都是我最爱的小猪猪，小宝贝。就是不减肥我也会一直陪着她的。</p><p>​        最后，恭喜甜甜得奖，希望你能继续努力，取得更好的成绩哥哥永远支持你，加油！加油！加油！！！</p><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 恋爱 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL安装及简单使用（8.0.20）</title>
      <link href="/2020/07/04/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%EF%BC%888.0.20%EF%BC%89/"/>
      <url>/2020/07/04/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%EF%BC%888.0.20%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL安装及简单使用（8-0-20）"><a href="#MySQL安装及简单使用（8-0-20）" class="headerlink" title="MySQL安装及简单使用（8.0.20）"></a>MySQL安装及简单使用（8.0.20）</h1><h2 id="MySQL卸载"><a href="#MySQL卸载" class="headerlink" title="MySQL卸载"></a>MySQL卸载</h2><p><strong>对的，安装前要先学会卸载。中间出错需要卸载干净，或者以前安装过其它版本再安装新的版本都需要卸载干净。</strong></p><p><strong>这里我用的工具卸载的：geek</strong></p><ul><li>百度云：链接：<a href="https://pan.baidu.com/s/1pOvoQNrQdtlfwWVU9UQjtA">https://pan.baidu.com/s/1pOvoQNrQdtlfwWVU9UQjtA</a><br>提取码：6uv2</li></ul><p><strong>建议卸载之后再到C盘中打开隐藏文件开关，找到AppData文件夹，检查里面是否还有MySQl数据文件，有的话全部删除</strong></p><h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><p><strong>下载地址：</strong></p><ul><li><p><strong>官网：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></strong></p><img src="https://s1.ax1x.com/2020/07/04/NxvWNj.png" alt="NxvWNj.png" style="zoom:50%;" /></li><li><p><strong>百度云：</strong>链接：<a href="https://pan.baidu.com/s/1ExYyVTOJhFDJnATONO0NWw">https://pan.baidu.com/s/1ExYyVTOJhFDJnATONO0NWw</a><br>提取码：blqc</p><p><strong>觉得官网下载慢的可以下载我下载好的，注意是64为版本，注意查看自己电脑位数。</strong></p></li></ul><h3 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h3><p><strong>本人太懒，懒得写图文，还是看大佬的吧，嘿嘿😜</strong></p><p><a href="https://blog.csdn.net/ROMdayfish/article/details/106069198?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.edu_weight">https://blog.csdn.net/ROMdayfish/article/details/106069198?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.edu_weight</a></p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p><strong>安装之后让我们看一下简单的入门吧！</strong></p><ol><li><p><strong>首先，启动MySQL的服务</strong></p><p>此电脑右键点击管理—–&gt;打开服务</p></li></ol><p><img src="https://s1.ax1x.com/2020/07/04/NzmL6S.png" alt="NzmL6S.png"></p><p><img src="https://s1.ax1x.com/2020/07/04/NznHE9.png" alt="NznHE9.png"></p><ol start="2"><li><strong>找到MySQL服务，默认名字叫MySQL80，如果自己该了，就找对应的</strong></li><li><strong>使用MySQL程序前服务必须开启，服务默认是自动开启，如果觉得浪费资源，可以调为手动开启关闭。</strong><ul><li>开启方法1：就在打开的服务窗口里双击，就能开启和关闭服务并且调整自动手动。</li><li>开启方法2：windows搜索窗口输入cmd选择以管理员身份打开。<ul><li>服务开启命令：net start mysql80(自定义名字的话改为对应名字)</li><li>服务关闭命令：net stop mysql80(自定义名字的话改为对应名字)</li></ul></li></ul></li></ol><h3 id="进入MySQL应用"><a href="#进入MySQL应用" class="headerlink" title="进入MySQL应用"></a>进入MySQL应用</h3><p><strong>MySQL默认的客户端是没有图形界面的，我们需要在命令行窗口操作（cmd）</strong></p><ol><li><p>打开命令行窗口：windows搜索窗口输入cmd，以管理员身份运行</p></li><li><p>登录MySQL：</p><p>在命令行窗口输入：</p><ul><li><p>mysql -h localhost -p 3306 -u root -p，回车，然后会出现：Enter password:  ，输入你安装时设置的密码，然后回车，显示图片这样为登录成功</p></li><li><p>也可以直接把密码写上：</p><p>mysql -h localhost -p 3306 -u root -p1234</p><p><strong>注意：-p之后不需要接空格，直接接密码</strong></p></li></ul><p><img src="https://s1.ax1x.com/2020/07/04/NzMV0g.png" alt="NzMV0g.png"></p><ul><li><p><strong>解释</strong></p><ul><li><p>-h localhost：为IP地址localhost表示本机地址，如果是要连接本机的MySQL服务器，也可以不用写这一句</p></li><li><p>-p 3306：为端口号，默认为3306，如果没有修改，连接本机MySQL服务时也可以省略不写，</p><p>​    如：mysql -u root -p 或 mysql -u root -p1234</p></li></ul></li><li><p>如果在cmd内输入命令显示“mysql”不是内部或外部命令，也不是可运行程序等字样，就需要配置环境变量。</p><ul><li><p>环境变量的配置：</p><p>鼠标右键单机此电脑，选择属性，找到左侧的高级系统设置，进去后点击环境变量，在系统变量里找到path，选择新建，然后找到你的MySQL的安装路径，在后面加上\bin，一般是在这个路径：</p><p>C:\Program Files\MySQL\MySQL Server 8.0</p><p>在后面加上\bin</p><p>C:\Program Files\MySQL\MySQL Server 8.0\bin</p><p>点击确定，全部点击确定，直到属性界面</p></li></ul></li><li><p>退出：</p><p>exit 然后回车</p></li></ul></li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><strong>注意：每条命令后要加分号  —— ;</strong></p><p><strong>1.查询当前已经存在的全部数据库</strong></p><p>show databases;</p><p><img src="https://s1.ax1x.com/2020/07/04/NzlWOf.png" alt="NzlWOf.png"></p><p><strong>注意：初始的四个库不能动</strong></p><p>information_schema  \mysql  \performance_schema \sys   </p><p><strong>MySQL8中sys数据库也不能动</strong></p><p><strong>2.进入某个数据库</strong></p><p>ues sys;</p><p><img src="https://s1.ax1x.com/2020/07/04/Nz10cq.png" alt="Nz10cq.png"></p><p><strong>3.查询数据库中的表，需要在上一步进入对应的数据库。</strong></p><p>show tables;</p><p><img src="https://s1.ax1x.com/2020/07/04/Nz1f3R.png" alt="Nz1f3R.png"></p><p><strong>两步比较麻烦，还可以直接查询某个数据库的表</strong></p><p>show tables from mysql;    <strong>查询数据库mysql的所有表</strong></p><p><strong>4.查询当前在哪个数据库</strong></p><p>select database();</p><p><img src="https://s1.ax1x.com/2020/07/04/Nz1bUe.png" alt="Nz1bUe.png"></p><p><strong>5. 创建一个新的数据库</strong></p><p>caeate database test1;</p><p><img src="https://s1.ax1x.com/2020/07/04/Nz3i5Q.png" alt="Nz3i5Q.png"></p><p><strong>6. 创建表</strong></p><p>要先进入一个数据库才能进行创建表的操作</p><p> create table stu1 (</p><p>​    列名 列类型，</p><p>​     id int,<br>​     name varchar(10),</p><p>​     列名 列类型，</p><p>  );</p><p><strong>7. 查看表结构</strong></p><p>desc 表名；</p><p><strong>8.退出登录</strong></p><p>exit</p><p><strong>9.注释</strong></p><p>单行注释：#注释内容</p><p>单行注释：– 注释内容          <strong>注意：–后面有一个空格</strong></p><p>多行注释：/*    注释内容      */</p><h3 id="图形化界面SQLyog"><a href="#图形化界面SQLyog" class="headerlink" title="图形化界面SQLyog"></a>图形化界面SQLyog</h3><p><strong>图形化界面可以更方便的管理数据库</strong></p><ul><li><strong>下载地址（破解版）</strong><ul><li>百度云：链接：<a href="https://pan.baidu.com/s/1J1AdY-_CUgvHpfSuEdokWA">https://pan.baidu.com/s/1J1AdY-_CUgvHpfSuEdokWA</a><br>提取码：z66d</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL安装及简单使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-简单的TCP通信程序（二）</title>
      <link href="/2020/05/27/Java%E7%AC%94%E8%AE%B0-%E7%AE%80%E5%8D%95%E7%9A%84TCP%E9%80%9A%E4%BF%A1%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/05/27/Java%E7%AC%94%E8%AE%B0-%E7%AE%80%E5%8D%95%E7%9A%84TCP%E9%80%9A%E4%BF%A1%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的TCP通信程序（二）"><a href="#简单的TCP通信程序（二）" class="headerlink" title="简单的TCP通信程序（二）"></a>简单的TCP通信程序（二）</h1><p>上次说了简单的TCP通信的代码实现，但是那是不完善的。只能进单次信息得交换，但是我们知道，一个服务器是可以和多个客户端进行通信得，所以，我们需要创建多线程。每有一个客户端发送信息服务器就会创建一个新的线程，从而实现多个客户端同时与服务器进行通信。</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><strong>我们以传输一张图片为例</strong></p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个本地字节输入流FileInputStream对象，构造方法中要绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\text\\a.jpg&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建一个客户端Socket对象，构造方法中绑定服务器的IP地址和端口号</span></span><br><span class="line">        <span class="comment">//这里以本地IP为例，端口号为8888</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用Socket中的方法getOutputStream,获取网络字节输出流OutputStream对象</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用本地字节输入流FileInputStream对象中的方法read，读取本地文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//使用网络字节输出流OutputStream对象中的方法write，把读到的文件上传到服务器</span></span><br><span class="line">            os.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        len = fis.read(bytes)并不会读到-1，所以，需要shutdownOutput()方法结束程序</span></span><br><span class="line"><span class="comment">            void shutdownOutput() 禁用此套接字的输出流。</span></span><br><span class="line"><span class="comment">            禁用此套接字的输出流。</span></span><br><span class="line"><span class="comment">            对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用网络字节输入流InputStream对象中的read方法读取服务器回写的数据</span></span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个服务器ServerSocket对象，和系统要指定的端口号</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            让服务器一直处于监听状态（死循环accept方法）</span></span><br><span class="line"><span class="comment">            有一个客户端上传文件，就保存一个</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//使用ServerSocket对象中的方法accept,获取到请求的客户端Socket对象</span></span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                使用多线程提高效率</span></span><br><span class="line"><span class="comment">                有一个客户端上传文件，就开启一个线程</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//使用Socket对象中的方法getInputStream，获取到网络字节输入流InputStream对象</span></span><br><span class="line">                        InputStream is = socket.getInputStream();</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">//判断D:\\upload文件夹是否存在，不存在创建。 这个地址为服务器保存接收文件的地址，可以自行定义。</span></span><br><span class="line">                        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\upload&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                            file.mkdirs();</span><br><span class="line">                        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            自定义一个文件的命名规则，防止同名的文件被覆盖</span></span><br><span class="line"><span class="comment">            规则 ：域名+毫秒值+随机数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">                        String fileName = <span class="string">&quot;itcast&quot;</span> + System.currentTimeMillis() + <span class="keyword">new</span> Random().nextInt(<span class="number">999999</span>) + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//创建一个本地字节输出流FileOutputStream对象，构造方法中绑定输出地址</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos = new FileOutputStream(file + &quot;\\a.jpg&quot;);</span></span><br><span class="line">                        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file + <span class="string">&quot;\\&quot;</span> + fileName);</span><br><span class="line">                        <span class="comment">//使用网络字节输入流InputStream对象中的方法read，读取客户端上传的文件</span></span><br><span class="line">                        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="keyword">while</span> ((len = is.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="comment">//使用本地字节输出流FileOutputStream对象中的方法write，把读取到的文件保存到服务器的硬盘上</span></span><br><span class="line">                            fos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//使用Socket对象中的方法getOutputStream，获取到网络字节输出流OutputStream对象</span></span><br><span class="line">                        <span class="comment">//使用网络字节输出流OutputStream对象中的方法write，给客户端回写“上传成功“</span></span><br><span class="line">                        socket.getOutputStream().write(<span class="string">&quot;上传成功&quot;</span>.getBytes());</span><br><span class="line">                        <span class="comment">// 释放资源</span></span><br><span class="line">                        fos.close();</span><br><span class="line">                        socket.close();</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        System.out.println(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//服务器一直处于监听状态，所以不用关闭服务器，想要关闭，手动停止程序运行。</span></span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先运行服务器端，再运行客户端。</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-简单的TCP通信程序（一）</title>
      <link href="/2020/05/24/Java%E7%AC%94%E8%AE%B0-%E7%AE%80%E5%8D%95%E7%9A%84TCP%E9%80%9A%E4%BF%A1%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/05/24/Java%E7%AC%94%E8%AE%B0-%E7%AE%80%E5%8D%95%E7%9A%84TCP%E9%80%9A%E4%BF%A1%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的TCP通信程序"><a href="#简单的TCP通信程序" class="headerlink" title="简单的TCP通信程序"></a>简单的TCP通信程序</h1><p>TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）。</p><h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a><strong>客户端实现</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTCPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个客户端对象Socket,构造方法绑定服务器的IP地址和端口号</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.使用网络字节输出流OutputStream对象中的方法write,给服务器发送数据</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;你好服务器！&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.使用网络字节输入流InputStream对象中的方法read,</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = inputStream.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//6.释放资源(Socket)</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器端实现"><a href="#服务器端实现" class="headerlink" title="服务器端实现"></a><strong>服务器端实现</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTCPServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建服务器ServerSocket对象和系统要指定的端口</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.使用ServerSocket对象中的方法accept，获取到请求客户端对象Socket</span></span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.使用网络字节输入流InputStream对象中的方法read,读取客户端发送的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = inputStream.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//6.使用网络字节输出流OutputStream对象中的方法write,给客户端回写数据</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;收到谢谢&quot;</span>.getBytes());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//7.释放资源(Socket,ServerSocket)</span></span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先运行服务器端，然后运行客户端。</p><p>服务器端收到客户端请求，然后读出并回复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你好服务器！</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>客户端收到服务器端的回复并读出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">收到谢谢</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这就是在本机上实现的一个简单的TCP通信</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-网络编程入门</title>
      <link href="/2020/05/22/Java%E7%AC%94%E8%AE%B0-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
      <url>/2020/05/22/Java%E7%AC%94%E8%AE%B0-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程入门"><a href="#网络编程入门" class="headerlink" title="网络编程入门"></a>网络编程入门</h1><h2 id="软件结构"><a href="#软件结构" class="headerlink" title="软件结构"></a>软件结构</h2><h3 id="C-S软件结构"><a href="#C-S软件结构" class="headerlink" title="C/S软件结构"></a>C/S软件结构</h3><p>全称为Client/Server结构，是指客户端和服务器结构。常见有即时聊天软件QQ等，下载软件百度（毒）云、迅雷等。是客户端与服务器之间的数据交换。</p><img src="https://cdn.jsdelivr.net/gh/Future-tt/images/img/111.png" style="zoom:50%;" /><h3 id="B-S结构"><a href="#B-S结构" class="headerlink" title="B/S结构"></a>B/S结构</h3><p>全称为Browser/Server结构，是指浏览器和服务器结构。例通过浏览器打开淘宝的主页。</p><img src="https://cdn.jsdelivr.net/gh/Future-tt/images/img/Snipaste_2020-05-22_16-02-38.png" style="zoom:50%;" /><p>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。<strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序。</p><h3 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h3><p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。</p><h4 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h4><p>传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p><p><img src="https://cdn.jsdelivr.net/gh/Future-tt/images/img/3_tcp_ip.jpg"></p><p>上图中，TCP/IP协议中的四层分别是应用层、传输层、网络层和链路层，每层分别负责不同的通信功能。<br>链路层：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。<br>网络层：网络层是整个TCP/IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。<br>运输层：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。<br>应用层：主要负责应用程序的协议，例如HTTP协议、FTP协议等。</p><h4 id="协议分类"><a href="#协议分类" class="headerlink" title="协议分类"></a>协议分类</h4><p>通信的协议还是比较复杂的，<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。</p><p><code>java.net</code> 包中提供了两种常见的网络协议的支持：</p><p><strong>UDP</strong>：用户数据报协议(User Datagram Protocol)。UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</p><p>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输例如视频会议都使用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。</p><p>但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议。</p><p><strong>特点:数据被限制在64kb以内，超出这个范围就不能发送了。</strong></p><p><strong>TCP</strong>：传输控制协议 (Transmission Control Protocol)。TCP协议是<strong>面向连接</strong>的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。</p><p>在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”。</p><p><strong>三次握手：</strong>TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。</p><ul><li><p>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</p></li><li><p>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</p></li><li><p>第三次握手，客户端再次向服务器端发送确认信息，确认连接。整个交互过程如下图所示。</p><p> 完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p></li></ul><h3 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h3><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>上述协议</p><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p><strong>IP地址：指互联网协议地址（Internet Protocol Address），</strong>IP地址用来给一个网络中的计算机设备做唯一的编号。</p><p><strong>IP地址分类</strong></p><ul><li><p>IPv4：是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code> 的形式，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。</p></li><li><p>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</p><p>为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，表示成<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，号称可以为全世界的每一粒沙子编上一个网址，这样就解决了网络地址资源数量不够的问题。</p></li></ul><p><strong>常用命令</strong></p><ul><li>查看本机IP地址，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><ul><li>检查网络是否连通，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping 空格 IP地址</span><br><span class="line">ping <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>特殊的IP地址**</p><ul><li>本机IP地址：<code>127.0.0.1</code>、<code>localhost</code> </li></ul><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。</p><p><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</p><p>利用<code>协议</code>+<code>IP地址</code>+<code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恋爱回忆录</title>
      <link href="/2020/05/20/%E5%9B%9E%E5%BF%86%E6%88%91%E7%9A%84%E6%81%8B%E7%88%B1/"/>
      <url>/2020/05/20/%E5%9B%9E%E5%BF%86%E6%88%91%E7%9A%84%E6%81%8B%E7%88%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="恋爱回忆录"><a href="#恋爱回忆录" class="headerlink" title="恋爱回忆录"></a>恋爱回忆录</h1><p>​        爱情，从小时候的的懵懂无知，再到现在的冲动和欲望。从对美好的憧憬，到现在抖音快手上误导人的扭曲观念使我们产生的惧怕。我觉得爱情没有价值，现在人们的错误的爱情观使我们对谈恋爱变得敬而远之。当然，这也不是全部，我觉得我就是个特例，应该是我和我女朋友。</p><img src="https://s1.ax1x.com/2020/05/20/YoaiIU.jpg" alt="YoaiIU.jpg" style="zoom:40%;" /><p>​        我们相遇在高中，高二时一个班，但是没有多大交际。在我的印象里她只是个坐在窗边的安静女孩，成绩平平，相貌平平，一切都是那么的平淡无奇，甚至容易让人忽略。就这样持续到了下半学期，我们相遇了。不知道因为什么原因，也许是我不记得了，不记得她为什么会拿着凳子来到我的座位旁听课，也不记得从什么时候开始聊的火热，但是我却很喜欢这种感觉，每次上课她没来总是习惯性的往后看，刻意的找她的眼神，会心地一笑，那种感觉很让人沉醉。但我还是清醒的，总害怕谈恋爱影响自己的学习，就压抑这种感觉，然后就产生了一种奇怪的现象，我觉得我对她的态度忽冷忽热，时近时远。</p><p>​        这种情况持续到了高三，好像是上天注定，我们又被分到了一个班，这也许是一个火花，一根引线。<br>​        高三的学习确实紧张，早上五点半起床，到晚上再宿舍写作业到十一点，不管最后的结果怎样，这个过程是值得我们回味的。再这种情况下，我们反而接触更多了，时不时的问问题，在学习的压力下最终我么没有保持理性的看待这种感情。我们模糊的确定关系了，因为高考的压力，就只是口头上的约定，高考后在一起。在这之后，我就感觉到了一种放松，一种舒适的感觉，也多出来了一种牵挂。但这种感觉让我很舒服。</p><img src="https://s1.ax1x.com/2020/05/20/YoatsI.jpg" alt="YoatsI.jpg" style="zoom:40%;" /><p>​        终于，高考结束了，由于战役过于惨烈，就忽略高考结果吧。<br>​        这也结束了我们的地下恋情，我们从现在开始才算正式在一起了，我们来到了同一所学校，开始了新的生活。两年的铺垫让我觉得这份感情是真真切切的，就像盖房子有了坚实的基础，我觉得我们之间也有坚实的基础。当然，这其中也不乏会有些吵闹，有吵得分手的，有一笑而过的，但更多的是甜蜜充实的。用我自己的感受来说：我不能想象身边不是她的生活是怎么样的。<br>​        但是，我也觉得我做的不够好。因为，我现在没有经济基础，我不能给她最好的，有时候甚至不能给她想要的，但是，她从不会抱怨，也更不会抱怨我，她是个好女孩，我一定会努力的，创造我们的未来。加油！！！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 恋爱 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android软件分享-美化篇</title>
      <link href="/2020/05/19/Android%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB-%E7%BE%8E%E5%8C%96%E7%AF%87/"/>
      <url>/2020/05/19/Android%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB-%E7%BE%8E%E5%8C%96%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Android软件分享"><a href="#Android软件分享" class="headerlink" title="Android软件分享"></a>Android软件分享</h1><h2 id="美化：简约"><a href="#美化：简约" class="headerlink" title="美化：简约"></a>美化：简约</h2><h3 id="Volume-Style"><a href="#Volume-Style" class="headerlink" title="Volume Style"></a>Volume Style</h3><p>链接：<a href="https://pan.baidu.com/s/1fIbOqjYqLsI0KFhs-0ek4A">https://pan.baidu.com/s/1fIbOqjYqLsI0KFhs-0ek4A</a><br>提取码：cxa0</p><p>一个可以改变音量调节样式的软件 ，需要权限（开启时会跳转让给予权限）。</p><p><img src="https://s1.ax1x.com/2020/05/19/Y4Jd2V.md.png" alt="Y4Jd2V.md.png"></p><p><img src="https://s1.ax1x.com/2020/05/19/Y4JqPI.png" alt="Y4JqPI.png"></p><p>这里就是自动跳转到的权限给予界面，找到软件，然后改为开。</p><p><strong>样式</strong></p><ul><li>原生Android样式</li></ul><p><img src="https://s1.ax1x.com/2020/05/19/Y4tept.png" alt="Y4tept.png"></p><ul><li><p>苹果样式</p><p><img src="https://s1.ax1x.com/2020/05/19/Y4tuX8.png" alt="Y4tuX8.png"></p></li><li><p>三星One UI样式</p></li></ul><p><img src="https://s1.ax1x.com/2020/05/19/Y4tl7Q.png" alt="Y4tl7Q.png"></p><ul><li>RGB</li></ul><p><img src="https://s1.ax1x.com/2020/05/19/Y4t8ts.png" alt="Y4t8ts.png"></p><ul><li><p>MIUI</p><p><img src="https://s1.ax1x.com/2020/05/19/Y4t691.png" alt="Y4t691.png"></p></li></ul><p><strong>不只是这样，还能在每个样式的基础上进行修改。</strong></p><p><strong>软件来源：</strong>酷安</p><h3 id="lawanchair"><a href="#lawanchair" class="headerlink" title="lawanchair"></a>lawanchair</h3><p>原生Pixel风格的桌面启动器，需要替换为默认启动器，有些厂商的桌面不能修改默认启动器，自己体验吧，我没有机器。</p><p>风格简约，可以自定义图标包（可以去<a href="https://www.coolapk.com/">酷安</a>搜索图标包）。</p><p><strong>效果图：</strong></p><p><img src="https://s1.ax1x.com/2020/05/19/Y4w1Wd.png" alt="Y4w1Wd.png"></p><p>下载地址的话，我没提取安装包，百度云对大家也不友好，所以建议下载<a href="https://www.coolapk.com/">酷安</a>，然后搜索名字就出来了。</p><p><strong>第一个Volume Style酷安上面没有，所以分享百度云链接</strong></p><h3 id="会话微件"><a href="#会话微件" class="headerlink" title="会话微件"></a>会话微件</h3><p>这个就比较有意思了像上图的</p><p><img src="https://s1.ax1x.com/2020/05/19/Y4rfD1.png" alt="Y4rfD1.png"></p><p>就是这个实现的还有更多好用好看的小部件，倒计时、通知列表、一言插件等。感兴趣的大家自己去探索吧。<strong>下载方式于上边一样，下载<a href="https://www.coolapk.com/">酷安</a>，然后搜索名字。</strong></p><p>今天就先到这了，还有一些其它方面的，下次继续，再见！！！</p>]]></content>
      
      
      <categories>
          
          <category> Android软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android软件 </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-类</title>
      <link href="/2020/05/18/Java%E7%AC%94%E8%AE%B0-%E7%B1%BB/"/>
      <url>/2020/05/18/Java%E7%AC%94%E8%AE%B0-%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p>定义一个类需要使用class关键字、例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>][<span class="keyword">abstract</span>|<span class="keyword">final</span>]<span class="class"><span class="keyword">class</span>&lt;<span class="title">class_name</span>&gt;[<span class="keyword">extends</span>&lt;<span class="title">class_name</span>&gt;][<span class="keyword">implements</span>&lt;<span class="title">interface_name</span>&gt;] </span>&#123;</span><br><span class="line">    <span class="comment">// 定义属性部分</span></span><br><span class="line">    &lt;property_type&gt;&lt;property1&gt;;</span><br><span class="line">    &lt;property_type&gt;&lt;property2&gt;;</span><br><span class="line">    &lt;property_type&gt;&lt;property3&gt;;</span><br><span class="line">    …</span><br><span class="line">    <span class="comment">// 定义方法部分</span></span><br><span class="line">    function1();</span><br><span class="line">    function2();</span><br><span class="line">    function3();</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示：上述语法中，中括号“[]”中的部分表示可以省略，竖线“|”表示“或关系”，例如 abstract|final，说明可以使用 abstract 或 final 关键字，但是两个关键字不能同时出现。</p><ul><li><code>public</code>：表示“共有”的意思。如果使用 public 修饰，则可以被其他类和程序访问。每个 Java 程序的主类都必须是 public 类，作为公共工具供其他类和程序使用的类应定义为 public 类。</li><li><code>abstract</code>：如果类被 abstract 修饰，则该类为抽象类，抽象类不能被实例化，但抽象类中可以有抽象方法（使用 abstract 修饰的方法）和具体方法（没有使用 abstract 修饰的方法）。继承该抽象类的所有子类都必须实现该抽象类中的所有抽象方法（除非子类也是抽象类）。</li><li><code>final</code>：如果类被 final 修饰，则不允许被继承。</li><li><code>class</code>：声明类的关键字。</li><li><code>class_name</code>：类的名称。</li><li><code>extends</code>：表示继承其他类。</li><li><code>implements</code>：表示实现某些接口。</li><li><code>property_type</code>：表示成员变量的类型。</li><li><code>property</code>：表示成员变量名称。</li><li><code>function()</code>：表示成员方法名称。</li></ul><p>Java 类名的命名规则：</p><ol><li>类名应该以下划线（_）或字母开头，最好以字母开头。</li><li>第一个字母最好大写，如果类名由多个单词组成，则每个单词的首字母最好都大写。</li><li>类名不能为 Java 中的关键字，例如 boolean、this、int 等。</li><li>类名不能包含任何嵌入的空格或点号以及除了下划线（_）和美元符号（$）字符之外的特殊字符。</li></ol><p><strong>例 1：</strong>创建一个名为Person的类</p><p>(1) 声明类。编写类的最外层框架，声明一个名称为 Person 的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 编写类的属性。类中的数据和方法统称为类成员。其中，类的属性就是类的数据成员。通过在类的主体中定义变量来描述类所具有的特征（属性），这里声明的变量称为类的成员变量。</p><p>(3) 编写类的方法。类的方法描述了类所具有的行为，是类的方法成员。可以简单地把方法理解为独立完成某个功能的单元模块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    </span><br><span class="line">    pinlic Void show &#123;</span><br><span class="line">        <span class="comment">//定义展示信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+ name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄&quot;</span> + age);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Person 类中首先定义了两个属性，分别为 name 和 age，然后定义了一个名称为 show() 的方法。</p><h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><h4 id="成员变量的定义和声明"><a href="#成员变量的定义和声明" class="headerlink" title="成员变量的定义和声明"></a>成员变量的定义和声明</h4><p>Java中成员变量定义了类的属性，如人的姓名，年龄，身高，等成为属性。</p><p>成员变量的声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>/<span class="keyword">protected</span>/<span class="keyword">private</span> <span class="keyword">static</span>/<span class="keyword">final</span> type variable_name;</span><br></pre></td></tr></table></figure><ul><li>public、protected、private：用于表示成员变量的访问权限。</li><li>static：表示该成员变量为类变量，也称为静态变量。</li><li>final：表示将该成员变量声明为常量，其值无法更改。</li><li>type：表示变量的类型。</li><li>variable_name：表示变量名称。</li></ul><p>可以在声明成员变量的同时对其进行初始化，如果声明成员变量时没有对其初始化，则系统会使用默认值初始化成员变量。</p><p>初始化的默认值如下：</p><ul><li>整数型（byte、short、int 和 long）的基本类型变量的默认值为 0。</li><li>单精度浮点型（float）的基本类型变量的默认值为 0.0f。</li><li>双精度浮点型（double）的基本类型变量的默认值为 0.0d。</li><li>字符型（char）的基本类型变量的默认值为 “\u0000”。</li><li>布尔型的基本类型变量的默认值为 false。</li><li>数组引用类型的变量的默认值为 null。如果创建了数组变量的实例，但没有显式地为每个元素赋值，则数组中的元素初始化值采用数组数据类型对应的默认值。</li></ul><p><strong>例</strong>：定义学生类的成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;  <span class="comment">//姓名  初始值为null</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sex = <span class="number">0</span>;  <span class="comment">//性别  0表示女  1表示男</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;  <span class="comment">//年龄  初始值为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="成员方法的声明和调用"><a href="#成员方法的声明和调用" class="headerlink" title="成员方法的声明和调用"></a>成员方法的声明和调用</h4><p>类的各种功能操作都是用方法来实现的，属性只不过提供了相应的数据。一个完整的方法通常包括方法名称、方法主体、方法参数和方法返回值类型。</p><p>成员方法一旦被定义，便可以在程序中多次调用，提高了编程效率。声明成员方法的语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>/<span class="keyword">private</span>/<span class="keyword">protected</span> <span class="keyword">static</span>/<span class="keyword">final</span>/ab <span class="keyword">void</span>/返回值类型 方法名 (形参) &#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中一个方法包含 4 部分：方法的返回值、方法名称、方法的参数和方法体。其中 retum_type 是方法返回值的数据类型，数据类型可以是原始的数据类型，即常用的 8 种数据类型，也可以是一个引用数据类型，如一个类、接口和数组等。</p><p>除了这些，一个方法还可以没有返回值，即返回类型为 void，像 main() 方法。</p><p>方法名表示自定义的方法名称，方法的名称首先要遵循标识符的命名约定，除此之外，方法的名称第一个单词的第一个字母是小写，第二单词的第一个字母是大写，依此类推。</p><p>形参表示参数列表，这些变量都要有自己的数据类型，可以是原始数据类型，也可以是复杂数据类型，一个方法主要依靠参数来传递消息。</p><ul><li>public、private、protected：表示成员方法的访问权限。</li><li>static：表示限定该成员方法为静态方法。</li><li>final：表示限定该成员方法不能被重写或重载。</li><li>abstract：表示限定该成员方法为抽象方法。抽象方法不提供具体的实现，并且所属类型必须为抽象类。</li></ul><h4 id="成员方法的返回值："><a href="#成员方法的返回值：" class="headerlink" title="成员方法的返回值："></a><strong>成员方法的返回值：</strong></h4><p>如果有返回值，在方法体中调用return语句声明要返回的值，返回值得类型于定义类型一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">age</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    ruturn age; <span class="comment">//age 为int类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="形参、实参及成员方法的调用"><a href="#形参、实参及成员方法的调用" class="headerlink" title="形参、实参及成员方法的调用"></a>形参、实参及成员方法的调用</h4><p><strong>形参：</strong> 是定义方法时参数列表中的参数。如方法后括号内，没有实际值的参数。</p><p><strong>实参：</strong> 是调用方法时为方法传递的参数，是具体的数值。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span> <span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;      <span class="comment">//这里的a</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">100</span>;</span><br><span class="line">    Test t = <span class="keyword">new</span> Test();</span><br><span class="line">    <span class="keyword">int</span> i = t.returnMin(x,y);    <span class="comment">// x和y是实参</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法的形参和实参具有以下特点：</p><ul><li><p>形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。因此，形参只有在方法内部有效，方法调用结束返回主调方法后则不能再使用该形参变量。</p></li><li><p>实参可以是常量、变量、表达式、方法等，无论实参是何种类型的量，在进行方法调用时，它们都必须具有确定的值，以便把这些值传送给形参。因此应预先用赋值、输入等办法使实参获得确定值。</p></li><li><p>实参和形参在数量、类型和顺序上应严格一致，否则会发生“类型不匹配” 的错误。</p></li><li><p>方法调用中发生的数据传送是单向的，即只能把实参的值传送绐形参，而不能把形参的值反向地传送给实参。因此在方法调用过程中，形参的值发生改变，而实参中的值不会变化。</p><p><strong>注意：</strong></p></li></ul><ol><li>对无参成员方法来说，是没有实际参数列表的（即 （）内为空），但方法名后的括号不能省略。</li><li>对带参数的成员方法来说，实参的个数、顺序以及它们的数据类型必须与形式参数的个数、顺序以及它们的数据类型保持一致，各个实参间用逗号分隔。实参名与形参名可以相同，也可以不同。</li><li>实参也可以是表达式，此时一定要注意使表达式的数据类型与形参的数据类型相同，或者使表达式的类型按 <a href="http://c.biancheng.net/java/">Java</a> 类型转换规则达到形参指明的数据类型。</li><li>实参变量对形参变量的数据传递是“值传递”，即只能由实参传递给形参，而不能由形参传递给实参。程序中执行到调用成员方法时，Java 把实参值复制到一个临时的存储区（栈）中，形参的任何修改都在栈中进行，当退出该成员方法时，Java 自动清除栈中的内容。</li></ol><h4 id="方法体中的局部变量"><a href="#方法体中的局部变量" class="headerlink" title="方法体中的局部变量"></a>方法体中的局部变量</h4><p>在方法体内可以定义本方法所使用的变量，这种变量是局部变量。它的生存期与作用域是在本方法内，也就是说，局部变量只能在本方法内有效或可见，离开本方法则这些变量将被自动释放。</p><p>在方法体内定义变量时，变量前不能加修饰符。局部变量在使用前必须明确赋值，否则编译时会出错。另外，在一个方法内部，可以在复合语句（把多个语句用括号<code>&#123;&#125;</code>括起来组成的一个语句称复合语句）中定义变量，这些变量只在复合语句中有效。</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-面向对象</title>
      <link href="/2020/05/13/Java%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/05/13/Java%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象简称 OO（Object Oriented），20 世纪 80 年代以后，有了面向对象分析（OOA）、 面向对象设计（OOD）、面向对象程序设计（OOP）等新的系统开发方式模型的研究。</p><p>对 <a href="http://c.biancheng.net/java/">Java</a> 语言来说，一切皆是对象。把现实世界中的对象抽象地体现在编程世界中，一个对象代表了某个具体的操作。一个个对象最终组成了完整的程序设计，这些对象可以是独立存在的，也可以是从别的对象继承过来的。对象之间通过相互作用传递信息，实现程序开发。</p><h3 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h3><p>Java 是面向对象的编程语言，对象就是面向对象程序设计的核心。所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念。对象有以下特点：</p><ul><li>对象具有属性和行为。</li><li>对象具有变化的状态。</li><li>对象具有唯一性。</li><li>对象都是某个类别的实例。</li><li>一切皆为对象，真实世界中的所有事物都可以视为对象。</li></ul><p>例如，在真实世界的学校里，会有学生和老师等实体，学生有学号、姓名、所在班级等属性（数据），学生还有学习、提问、吃饭和走路等操作。学生只是抽象的描述，这个抽象的描述称为“类”。在学校里活动的是学生个体，即张同学、李同学等，这些具体的个体称为“对象”，“对象”也称为“实例”。</p><h3 id="面向对象的三大核心特性"><a href="#面向对象的三大核心特性" class="headerlink" title="面向对象的三大核心特性"></a>面向对象的三大核心特性</h3><p>面向对象开发模式更有利于人们开拓思维，在具体的开发过程中便于程序的划分，方便程序员分工合作，提高开发效率。面向对象程序设计有以下优点。</p><ol><li>可重用性：代码重复使用，减少代码量，提高开发效率。下面介绍的面向对象的三大核心特性（继承、封装和多态）都围绕这个核心。</li><li>可扩展性：指新的功能可以很容易地加入到系统中来，便于软件的修改。</li><li>可管理性：能够将功能与数据结合，方便管理。</li></ol><p>该开发模式之所以使程序设计更加完善和强大，主要是因为面向对象具有<strong>继承、封装和多态 3 个核心特性</strong>。</p><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><p>如同生活中的子女继承父母拥有的所有财产，程序中的继承性是指子类拥有父类的全部特征和行为，这是类之间的一种关系。Java 只支持单继承。</p><p>例如定义一个语文老师类和数学老师类，如果不采用继承方式，那么两个类中需要定义的属性和方法如图 1 所示。</p><p><img src="http://c.biancheng.net/uploads/allimg/181017/3-1Q01G40613629.jpg" alt="img"></p><p>图 1 语文老师类和数学老师类中的属性和方法</p><p>从图 1 能够看出，语文老师类和数学老师类中的许多属性和方法相同，这些相同的属性和方法可以提取出来放在一个父类中，这个父类用于被语文老师类和数学老师类继承。当然父类还可以继承别的类，如图 2 所示。</p><p><img src="http://c.biancheng.net/uploads/allimg/181017/3-1Q01G40AR23.jpg" alt="img"></p><p>总结图 2 的继承关系，可以用概括的树形关系来表示，如图 3 所示。</p><p><img src="http://c.biancheng.net/uploads/allimg/181017/3-1Q01G40RT47.jpg" alt="img"></p><p>从图 3 中可以看出，学校主要人员是一个大的类别，老师和学生是学校主要人员的两个子类，而老师又可以分为语文老师和数学老师两个子类，学生也可以分为班长和组长两个子类。</p><p>使用这种层次形的分类方式，是为了将多个类的通用属性和方法提取出来，放在它们的父类中，然后只需要在子类中各自定义自己独有的属性和方法，并以继承的形式在父类中获取它们的通用属性和方法即可。</p><p>提示：<a href="http://c.biancheng.net/cplus/">C++</a> 支持多继承，多继承就是一个子类可有多个父类。例如，客轮是轮船也是交通工具，客轮的父类是轮船和交通工具。多继承会引起很多冲突问题，因此现在很多面向对象的语言都不支持多继承。Java 语言是单继承的，即只能有一个父类，但 Java 可以实现多个接口（接口类似于类，但接口的成员没有执行体。详细了解可参考《<a href="http://c.biancheng.net/view/6540.html">Java接口</a>》一节），可以防止多继承所引起的冲突问题。</p><h4 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h4><p>封装是将代码及其处理的数据绑定在一起的一种编程机制，该机制保证了程序和数据都不受外部干扰且不被误用。封装的目的在于保护信息，使用它的主要优点如下。</p><ul><li>保护类中的信息，它可以阻止在外部定义的代码随意访问内部代码和数据。</li><li>隐藏细节信息，一些不需要程序员修改和使用的信息，比如取款机中的键盘，用户只需要知道按哪个键实现什么操作就可以，至于它内部是如何运行的，用户不需要知道。</li><li>有助于建立各个系统之间的松耦合关系，提高系统的独立性。当一个系统的实现方式发生变化时，只要它的接口不变，就不会影响其他系统的使用。例如 U 盘，不管里面的存储方式怎么改变，只要 U 盘上的 USB 接口不变，就不会影响用户的正常操作。</li><li>提高软件的复用率，降低成本。每个系统都是一个相对独立的整体，可以在不同的环境中得到使用。例如，一个 U 盘可以在多台电脑上使用。</li></ul><p>Java 语言的基本封装单位是类。由于类的用途是封装复杂性，所以类的内部有隐藏实现复杂性的机制。Java 提供了私有和公有的访问模式，类的公有接口代表外部的用户应该知道或可以知道的每件东西，私有的方法数据只能通过该类的成员代码来访问，这就可以确保不会发生不希望的事情。</p><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><p>面向对象的多态性，即“一个接口，多个方法”。多态性体现在父类中定义的属性和方法被子类继承后，可以具有不同的属性或表现方式。多态性允许一个接口被多个同类使用，弥补了单继承的不足。多态概念可以用树形关系来表示，如图 4 所示。</p><p><img src="http://c.biancheng.net/uploads/allimg/181017/3-1Q01G4095bW.jpg" alt="img"></p><h3 id="Java认识类和对象"><a href="#Java认识类和对象" class="headerlink" title="Java认识类和对象"></a>Java认识类和对象</h3><p>在面向对象中，类和对象是最基本、最重要的组成单元。类实际上是表示一个客观世界某类群体的一些基本特征抽象。对象就是表示一个个具体的东西。所以说类是对象的抽象，对象是类的具体。</p><p>让我们来看看人类所具有的一些特征，这些特征包括属性（一些参数、数值）以及方法（一些行为，他能干什么）。</p><p>每个人都有身高、体重、年龄、血型等属性，人会劳动、会直立行走、会用自己的头脑去创造工具等方法。人之所以能区别于其他类型的动物，是因为每个人都具有“人”这个群体的属性与方法。</p><p>“人类”只是一个抽象的概念，它仅仅是一个概念，是不存在的实体！但是所有具备“人类”这个群体的属性与方法的对象都叫人！这个对象“人” 是实际存在的实体！每个人都是“人”这个群体的一个对象。</p><p>老虎为什么不是人？因为它不具备“人”这个群体的属性与方法，老虎不会直立行走，不会使用工具等，所以说老虎不是人！也就是说，类是概念模型，定义对象的所有特性和所需的操作，对象是真实的模型，是一个具体的实体。</p><p>由此可见，<strong style="color:red;"><strong>类是描述了一组有相同特性（属性）和相同行为（方法）的一组对象的集合</strong>。</strong></p><p>对象或实体所拥有的特征在类中表示时称为类的属性。例如，每个人都具有姓名、年龄和体重，这是所有人共有的特征。但是每一个对象的属性值又各不相同，例如，小明和小红都具有体重这个属性，但是他们的体重值是不同的。</p><p>对象执行的操作称为类的方法。比如，“人”这个对象都具有的行为是“吃饭”，因此，吃饭就是“人”类的一个方法。</p><p>综上所述，类是描述实体的“模板”和“原型”，它定义了属于这个类的对象所应该具有的状态和行为。比如一名学生在上课。一名正在上课的学生是类，它定义的信息有：姓名、上课。</p><p>使用该类定义的不同姓名的人在上课是对象，他们可能是小明、小红、小丽、张会等。在 <a href="http://c.biancheng.net/java/">Java</a> 面向对象编程中，用自定义的类模型可以创建该类的一个实例，也就是对象。</p><p>类是实体对象的概念模型，因此通常是笼统的、不具体的。关于类和对象，初学者在理解上是存在一定难度的。表 1 给出了类和对象的更多示例。</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-数组</title>
      <link href="/2020/05/13/Java%E7%AC%94%E8%AE%B0-%E6%95%B0%E7%BB%84/"/>
      <url>/2020/05/13/Java%E7%AC%94%E8%AE%B0-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>在某些情况下，虽然可以使用单个变量来存储信息，但是如果需要存储的信息较多（例如存储 50 名学生的成绩），这时再依次创建变量声明并赋值显得非常麻烦。</p><p>随着处理的信息量越来越大，工作也就越来越烦琐，这时可以使用数组或集合来存储信息。通过使用数组，可以在很大程度上缩短和简化程序代码，从而提高应用程序的效率。</p><p>数组（array）是一种最简单的复合数据类型，它是有序数据的集合，数组中的每个元素具有相同的数据类型，可以用一个统一的数组名和不同的下标来确定数组中唯一的元素。根据数组的维度，可以将其分为一维数组、二维数组和多维数组等。</p><p>在计算机语言中数组是非常重要的集合类型，大部分计算机语言中数组具有如下三个基本特性：</p><ol><li> 一致性：数组只能保存相同数据类型元素，元素的数据类型可以是任何相同的数据类型。</li><li> 有序性：数组中的元素是有序的，通过下标访问。</li><li> 不可变性：数组一旦初始化，则长度（数组中元素的个数）不可变。</li></ol><p>总的来说，数组具有以下特点：</p><ul><li>数组可以是一维数组、二维数组或多维数组。</li><li>数值数组元素的默认值为 0，而引用元素的默认值为 null。</li><li>数组的索引从 0 开始，如果数组有 n 个元素，那么数组的索引是从 0 到（n-1）。</li><li>数组元素可以是任何类型，包括数组类型。</li><li>数组类型是从抽象基类 Array 派生的引用类型。</li></ul><p>注意：如果你熟悉 C/<a href="http://c.biancheng.net/cplus/">C++</a>，请注意，<a href="http://c.biancheng.net/java/">Java</a> 数组的工作原理与它们不同。</p><p>在 Java 中数组的下标是从零开始的，很多计算机语言的数组下标也从零开始。Java 数组下标访问运算符是中括号，如 intArray[0]，表示访问 intArray 数组的第一个元素，0 是第一个元素的下标。Java 中的数组本身是引用数据类型，它的长度属性是 length。</p><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p>当数组中每个元素都只带有一个下标时，这种数组就是“一维数组”。一维数组（one-dimensional array）实质上是一组相同类型数据的线性集合，是数组中最简单的一种数组。</p><p>数组是引用数据类型，引用数据类型在使用之前一定要做两件事情：声明和初始化。所以本文将重点介绍一维数组的创建、初始化和使用。</p><h4 id="创建一维数组"><a href="#创建一维数组" class="headerlink" title="创建一维数组"></a>创建一维数组</h4><p>为了在程序中使用一个数组，必须声明一个引用该数组的变量，并指明整个变量可以引用的数组类型。声明一维数组的语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type[] arrayName;    // 数据类型[] 数组名;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type arrayName[];    // 数据类型 数组名[];</span><br></pre></td></tr></table></figure><p>可见数组的声明有两种形式：一种是中括号”[]“跟在元素数据类型之后，另一种是中括号”[]“跟在变量名之后。</p><p>对于以上两种语法格式而言，<a href="http://c.biancheng.net/java/">Java</a> 更推荐采用第一种声明格式，因为第一种格式不仅具有更好的语意，而且具有更好的可读性。对于第一种格式<code>type[] arrayName</code>，很容易理解这是定义一个变量，其中变量名是 arrayName，而变量类型是 type[]。</p><p>前面已经指出：type[] 确实是一种新类型，与 type 类型完全不同（例如 int 类型是基本类型，但 int[] 是引用类型）。因此，这种方式既容易理解，也符合定义变量的语法。但第二种格式<code>type arrayName[]</code>的可读性就差了，看起来好像定义了一个类型为 type 的变量，而变量名是 arrayName[]，这与真实的含义相去甚远。</p><p>提示：Java 的模仿者 <a href="http://c.biancheng.net/csharp/">C#</a> 就不再支持<code>type arrayName[]</code>这种语法，它只支持第一种定义数组的语法。越来越多的语言不再支持<code>type arrayName[]</code>这种数组定义语法。</p><p>以上两种格式都可以声明一个数组，其中的数据类型既可以是基本数据类型，也可以是引用数据类型。数组名可以是任意合法的变量名。声明数组就是要告诉计算机该数组中数据的类型是什么。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] score;    <span class="comment">// 存储学生的成绩，类型为整型</span></span><br><span class="line"><span class="keyword">double</span>[] price;    <span class="comment">// 存储商品的价格，类型为浮点型</span></span><br><span class="line">String[] name;    <span class="comment">// 存储商品名称，类型为字符串型</span></span><br></pre></td></tr></table></figure><p>在声明数组时不需要规定数组的长度，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score[<span class="number">10</span>];    <span class="comment">// 这是错误的</span></span><br></pre></td></tr></table></figure><p><strong>分配空间</strong></p><p>声明了数组，只是得到了一个存放数组的变量，并没有为数组元素分配内存空间，不能使用。因此要为数组分配内存空间，这样数组的每一个元素才有一个空间进行存储。</p><p>简单地说，分配空间就是要告诉计算机在内存中为它分配几个连续的位置来存储数据。在 Java 中可以使用 new 关键字来给数组分配空间。分配空间的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayName = new type[size];    // 数组名 = new 数据类型[数组长度];</span><br></pre></td></tr></table></figure><p>其中，数组长度就是数组中能存放的元素个数，显然应该为大于 0 的整数，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">price = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">30</span>];</span><br><span class="line">name = <span class="keyword">new</span> String[<span class="number">20</span>];</span><br></pre></td></tr></table></figure><p>这里的 score 是已经声明过的 int[] 类型的变量，当然也可以在声明数组时就给它分配空间，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type[] arrayName = new type[size];    // 数据类型[] 数组名 = new 数据类型[数组长度];</span><br></pre></td></tr></table></figure><p><strong>例 1</strong></p><p>例如，声明并分配一个长度为 5 的 int 类型数组 arr，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>执行后 arr 数组在内存中的格式如图 1 所示。</p><p><img src="http://c.biancheng.net/uploads/allimg/181016/3-1Q016111945238.jpg" alt="img"></p><p>在图 1 中 arr 为数组名称，方括号“[]”中的值为数组的下标。数组通过下标来区分数组中不同的元素，并且下标是从 0 开始的。因此这里包含 5 个元素的 arr 数组最大下标为 4。</p><p><strong>注意：</strong>一旦声明了数组的大小，就不能再修改。这里的数组长度也是必需的，不能少。</p><p>尽管数组可以存储一组基本数据类型的元素，但是数组整体属于引用数据类型。当声明一个数组变量时，其实是创建了一个类型为“数据类型[]”（如 int[]、double[]、String[]）的数组对象，它具有表 1 所示的方法和属性。</p><table><thead><tr><th></th><th align="center"><strong>名称</strong></th><th align="center">返回值</th></tr></thead><tbody><tr><td><strong>方法</strong></td><td align="center">clone()</td><td align="center">Object</td></tr><tr><td><strong>方法</strong></td><td align="center">equals(Object obj)</td><td align="center">boolean</td></tr><tr><td><strong>方法</strong></td><td align="center">getClass()</td><td align="center">Class&lt;?&gt;</td></tr><tr><td><strong>方法</strong></td><td align="center">hashCode()</td><td align="center">int</td></tr><tr><td><strong>方法</strong></td><td align="center">notify()</td><td align="center">void</td></tr><tr><td><strong>方法</strong></td><td align="center">notify All()</td><td align="center">void</td></tr><tr><td><strong>方法</strong></td><td align="center">toString()</td><td align="center">String</td></tr><tr><td><strong>方法</strong></td><td align="center">wait()</td><td align="center">void</td></tr><tr><td><strong>方法</strong></td><td align="center">wait(long timeout)</td><td align="center">void</td></tr><tr><td><strong>方法</strong></td><td align="center">wait(long timeout,int nanos)</td><td align="center">void</td></tr><tr><td><strong>属性</strong></td><td align="center">length</td><td align="center">int</td></tr></tbody></table><h4 id="初始化一维数组"><a href="#初始化一维数组" class="headerlink" title="初始化一维数组"></a>初始化一维数组</h4><p>Java 语言中数组必须先初始化，然后才可以使用。所谓初始化，就是为数组的数组元素分配内存空间，并为每个数组元素赋初始值。</p><p>能不能只分配内存空间，不赋初始值呢？</p><p>不行，一旦为数组的每个数组元素分配了内存空间，每个内存空间里存储的内容就是该数组元素的值，即使这个内存空间存储的内容为空，这个空也是一个值（null）。不管以哪种方式来初始化数组，只要为数组元素分配了内存空间，数组元素就具有了初始值。初始值的获得有两种形式，一种由系统自动分配，另一种由程序员指定。</p><p>数组在初始化数组的同时，可以指定数组的大小，也可以分别初始化数组中的每一个元素。在 Java 语言中，初始化数组有以下 3 种方式。</p><p><strong>1）使用 new 指定数组大小后进行初始化</strong></p><p>使用 new 关键字创建数组，在创建时指定数组的大小。语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type[] arrayName = new int[size];</span><br></pre></td></tr></table></figure><p>创建数组之后，元素的值并不确定，需要为每一个数组的元素进行赋值，其下标从 0 开始。</p><p><strong>例 2</strong></p><p>创建包含 5 个元素的 int 类型的数组，然后分别将元素的值设置为 1、2、3、5 和 8。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] number = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">number[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">number[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">number[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">number[<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line">number[<span class="number">4</span>] = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>如果程序员只指定了数组的长度，那么系统将负责为这些数组元素分配初始值。指定初始值时，系统按如下规则分配初始值。</p><ul><li>数组元素的类型是基本类型中的整数类型（byte、short、int 和 long），则数组元素的值是 0。</li><li>数组元素的类型是基本类型中的浮点类型（float、double），则数组元素的值是 0.0。</li><li>数组元素的类型是基本类型中的字符类型（char），则数组元素的值是‘\u0000’。</li><li>数组元素的类型是基本类型中的布尔类型（boolean），则数组元素的值是 false。</li><li>数组元素的类型是引用类型（类、接口和数组），则数组元素的值是 null。</li></ul><p><strong>2）使用 new 指定数组元素的值</strong></p><p>使用上述方式初始化数组时，只有在为元素赋值时才确定值。可以不使用上述方式，而是在初始化时就已经确定值。语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type[] arrayName = new type[]&#123;值 1,值 2,值 3,值 4,• • •,值 n&#125;;</span><br></pre></td></tr></table></figure><p><strong>例 3</strong></p><p>更改例 2 中的代码，使用 new 直接指定数组元素的值。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] number = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure><p>上述代码的效果等价于例 2 的效果。</p><p>注意：不要在进行数组初始化时，既指定数组的长度，也为每个数组元素分配初始值，这样会造成代码错误。例如下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] number = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">5</span>] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,​<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>3）直接指定数组元素的值</strong></p><p>在上述两种方式的语法中，type 可以省略，如果已经声明数组变量，那么直接使用这两种方式进行初始化。如果不想使用上述两种方式，那么可以不使用 new 直接指定数组元素的值。语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type[] arrayName = &#123;值 1,值 2,值 3,...,值 n&#125;;</span><br></pre></td></tr></table></figure><p><strong>例4</strong></p><p>在前面例子的基础上更改代码，直接使用上述语法实现 number 数组的初始化。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] number = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure><p>使用这种方式时，数组的声明和初始化操作要同步，即不能省略数组变量的类型。如下的代码就是错误的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] number;</span><br><span class="line">number = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="获取单个元素"><a href="#获取单个元素" class="headerlink" title="获取单个元素"></a>获取单个元素</h4><p>获取单个元素是指获取数组中的一个元素，如第一个元素或最后一个元素。获取单个元素的方法非常简单，指定元素所在数组的下标即可。语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayName[index];</span><br></pre></td></tr></table></figure><p>其中，arrayName 表示数组变量，index 表示下标，下标为 0 表示获取第一个元素，下标为 array.length-1 表示获取最后一个元素。当指定的下标值超出数组的总长度时，会拋出 ArraylndexOutOfBoundsException 异常。</p><p><strong>例5</strong></p><p>获取 number 数组中的第一个元素、最后一个元素和第六个元素，并将元素的值输出。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] number = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;获取第一个元素：&quot;</span>+number[<span class="number">0</span>]);</span><br><span class="line">System.out.println(<span class="string">&quot;获取最后一个元素：&quot;</span>+number[number.length-<span class="number">1</span>]);</span><br><span class="line">System.out.println(<span class="string">&quot;获取第6个元素：&quot;</span>+number[<span class="number">5</span>]);</span><br></pre></td></tr></table></figure><p>执行上述代码，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取第一个元素：1</span><br><span class="line">获取最后一个元素：8</span><br><span class="line">java.lang.ArrayIndexOutOfBoundsException: 5</span><br></pre></td></tr></table></figure><p>我们一共存入了 5 个值，所以下标的取值为 0~4。因为 number[5] 取出的内容超过了这个下标，所以输出结果会提示数组索引超出绑定异常（ArrayIndexOutOfBoundsException）。这一点是在使用数组中是经常出现的问题，大家在编写程序时应该引起注意。</p><p><strong>例 6</strong></p><p>编写一个 Java 程序，使用数组存放录入的 5 件商品价格，然后使用下标访问第 3 个元素的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] prices = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]; <span class="comment">// 声明数组并分配空间</span></span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in); <span class="comment">// 接收用户从控制台输入的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;件商品的价格：&quot;</span>);</span><br><span class="line">            prices[i] = input.nextInt(); <span class="comment">// 接收用户从控制台输入的数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;第 3 件商品的价格为：&quot;</span> + prices[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的“int[] prices = new int[5]”语句创建了需要 5 个元素空间的 prices 数组，然后结合 for 循环向数组中的每个元素赋值。</p><p>注意：在 Java 中取得数组的长度（也就是数组元素的长度）可以利用“数组名称.length”，返回一个 int 型数据。</p><p>数组的索引从 0 开始，而 for 循环中的变量 i 也从 0 开始，因此 score 数组中的元素可以使用 scored 来表示，大大简化了代码。最后使用 prices[2] 获取 prices 数组的第 3 个元素，最终运行效果如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">请输入第1件商品的价格：</span><br><span class="line">5</span><br><span class="line">请输入第2件商品的价格：</span><br><span class="line">4</span><br><span class="line">请输入第3件商品的价格：</span><br><span class="line">6</span><br><span class="line">请输入第4件商品的价格：</span><br><span class="line">4</span><br><span class="line">请输入第5件商品的价格：</span><br><span class="line">8</span><br><span class="line">第 3 件商品的价格为：6</span><br></pre></td></tr></table></figure><h4 id="获取全部元素"><a href="#获取全部元素" class="headerlink" title="获取全部元素"></a>获取全部元素</h4><p>当数组中的元素数量不多时，要获取数组中的全部元素，可以使用下标逐个获取元素。但是，如果数组中的元素过多，再使用单个下标则显得烦琐，此时使用一种简单的方法可以获取全部元素——使用循环语句。</p><p>下面利用 for 循环语句遍历 number 数组中的全部元素，并将元素的值输出。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] number = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;number.length;i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+number[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了使用 for 语句，还可以使用 foreach 遍历数组中的元素，并将元素的值输出。代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> val:number) &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;元素的值依次是：&quot;</span>+val+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>为了方便组织各种信息，计算机常将信息以表的形式进行组织，然后再以行和列的形式呈现出来。二维数组的结构决定了其能非常方便地表示计算机中的表，以第一个下标表示元素所在的行，第二个下标表示元素所在的列。下面简单了解一下二维数组，包括数组的声明和初始化。</p><h4 id="创建二位数组"><a href="#创建二位数组" class="headerlink" title="创建二位数组"></a>创建二位数组</h4><p>在 <a href="http://c.biancheng.net/java/">Java</a> 中二维数组被看作数组的数组，即二维数组为一个特殊的一维数组，其每个元素又是一个一维数组。Java 并不直接支持二维数组，但是允许定义数组元素是一维数组的一维数组，以达到同样的效果。声明二维数组的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type arrayName[][];    // 数据类型 数组名[][];</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type[][] arrayName;    // 数据类型[][] 数组名;</span><br></pre></td></tr></table></figure><p>其中，type 表示二维数组的类型，arrayName 表示数组名称，第一个中括号表示行，第二个中括号表示列。</p><p>下面分别声明 int 类型和 char 类型的数组，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] age;</span><br><span class="line"><span class="keyword">char</span>[][] sex;</span><br></pre></td></tr></table></figure><h4 id="初始化二维数组"><a href="#初始化二维数组" class="headerlink" title="初始化二维数组"></a>初始化二维数组</h4><p>二维数组可以初始化，和一维数组一样，可以通过 3 种方式来指定元素的初始值。这 3 种方式的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type[][] arrayName = new type[][]&#123;值 1,值 2,值 3,…,值 n&#125;;    // 在定义时初始化</span><br><span class="line">type[][] arrayName = new type[size1][size2];    // 给定空间，在赋值</span><br><span class="line">type[][] arrayName = new type[size][];    // 数组第二维长度为空，可变化</span><br></pre></td></tr></table></figure><p><strong>例 1</strong></p><p>使用第一种方式声明 int 类型的二维数组，然后初始化该二维数组。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] temp = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>上述代码创建了一个二行二列的二维数组 temp，并对数组中的元素进行了初始化。图 1 所示为该数组的内存结构。</p><p><img src="http://c.biancheng.net/uploads/allimg/181016/3-1Q016131301F7.jpg" alt="img"></p><p>使用第二种方式声明 int 类型的二维数组，然后初始化该二维数组。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>使用第三种方式声明 int 类型的二维数组，并且初始化数组。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][];</span><br></pre></td></tr></table></figure><h4 id="获取单个元素-1"><a href="#获取单个元素-1" class="headerlink" title="获取单个元素"></a>获取单个元素</h4><p>在上部分使用的前 2 种方式创建并初始化了一个二行二列的 int 类型数组 temp。当需要获取二维数组中元素的值时，也可以使用下标来表示。语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayName[i-1][j-1];</span><br></pre></td></tr></table></figure><p>其中，arrayName 表示数组名称，i 表示数组的行数，j 表示数组的列数。例如，要获取第二行第二列元素的值，应该使用 temp[1] [1]来表示。这是由于数组的下标起始值为 0，因此行和列的下标需要减 1。</p><p><strong>例 2</strong></p><p>通过下标获取 class_score 数组中第二行第二列元素的值与第四行第一列元素的值。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span>[][] class_score = &#123;&#123;<span class="number">10.0</span>,<span class="number">99</span>,<span class="number">99</span>&#125;,&#123;<span class="number">100</span>,<span class="number">98</span>,<span class="number">97</span>&#125;,&#123;<span class="number">100</span>,<span class="number">100</span>,<span class="number">99.5</span>&#125;,&#123;<span class="number">99.5</span>,<span class="number">99</span>,<span class="number">98.5</span>&#125;&#125;;</span><br><span class="line">    System.out.println(<span class="string">&quot;第二行第二列元素的值：&quot;</span>+class_score[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    System.out.println(<span class="string">&quot;第四行第一列元素的值：&quot;</span>+class_score[<span class="number">3</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上述代码，输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第二行第二列元素的值：98.0</span><br><span class="line">第四行第一列元素的值：99.5</span><br></pre></td></tr></table></figure><h4 id="获取全部元素-1"><a href="#获取全部元素-1" class="headerlink" title="获取全部元素"></a>获取全部元素</h4><p>在一维数组中直接使用数组的 length 属性获取数组元素的个数。而在二维数组中，直接使用 length 属性获取的是数组的行数，在指定的索引后加上 length（如 array[0].length）表示的是该行拥有多少个元素，即列数。</p><p>如果要获取二维数组中的全部元素，最简单、最常用的办法就是使用 for 语句。在一维数组全部输出时，我们使用一层 for 循环，而二维数组要想全部输出，则使用嵌套 for 循环（2 层 for 循环）。</p><p><strong>例 3</strong></p><p>使用 for 循环语句遍历 double 类型的 class_score 数组的元素，并输出每一行每一列元素的值。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span>[][] class_score = &#123; &#123; <span class="number">100</span>, <span class="number">99</span>, <span class="number">99</span> &#125;, &#123; <span class="number">100</span>, <span class="number">98</span>, <span class="number">97</span> &#125;, &#123; <span class="number">100</span>, <span class="number">100</span>, <span class="number">99.5</span> &#125;, &#123; <span class="number">99.5</span>, <span class="number">99</span>, <span class="number">98.5</span> &#125; &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; class_score.length; i++) &#123; <span class="comment">// 遍历行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; class_score[i].length; j++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;class_score[&quot;</span> + i + <span class="string">&quot;][&quot;</span> + j + <span class="string">&quot;]=&quot;</span> + class_score[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码使用嵌套 for 循环语句输出二维数组。在输出二维数组时，第一个 for 循环语句表示以行进行循环，第二个 for 循环语句表示以列进行循环，这样就实现了获取二维数组中每个元素的值的功能。</p><p>执行上述代码，输出结果如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class_score[0][0]=100.0</span><br><span class="line">class_score[0][1]=99.0</span><br><span class="line">class_score[0][2]=99.0</span><br><span class="line">class_score[1][0]=100.0</span><br><span class="line">class_score[1][1]=98.0</span><br><span class="line">class_score[1][2]=97.0</span><br><span class="line">class_score[2][0]=100.0</span><br><span class="line">class_score[2][1]=100.0</span><br><span class="line">class_score[2][2]=99.5</span><br><span class="line">class_score[3][0]=99.5</span><br><span class="line">class_score[3][1]=99.0</span><br><span class="line">class_score[3][2]=98.5</span><br></pre></td></tr></table></figure><p><strong>例 4</strong></p><p>假设有一个矩阵为 5 行 5 列，该矩阵是由程序随机产生的 10 以内数字排列而成。下面使用二维数组来创建该矩阵，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个二维矩阵</span></span><br><span class="line">        <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// 随机分配值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">                matrix[i][j] = (<span class="keyword">int</span>) (Math.random() * <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;下面是程序生成的矩阵\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历二维矩阵并输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; matrix.length; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">0</span>; g &lt; matrix[k].length; g++) &#123;</span><br><span class="line">                System.out.print(matrix[k][g] + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该程序中，首先定义了一个二维数组，然后使用两个嵌套的 for 循环向二维数组中的每个元素赋值。其中，Math.random() 方法返回的是一个 double 类型的数值，数值为 0.6、0.9 等，因此乘以 10 之后为 10 以内的整数。最后又使用了两个嵌套的 for 循环遍历二维数组，输出二维数组中的值，从而产生矩阵。</p><p>运行该程序的结果如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">下面是程序生成的矩阵</span><br><span class="line"></span><br><span class="line">78148</span><br><span class="line">69230</span><br><span class="line">43823</span><br><span class="line">75663</span><br><span class="line">05688</span><br></pre></td></tr></table></figure><p>for each 循环语句不能自动处理二维数组的每一个元素。它是按照行， 也就是一维数组处理的。要想访问二维教组 a 的所有元素， 需要使用两个嵌套的循环， 如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span>[] row : a) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> value : row) &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把【例2】修改为使用 for each 循环语句输出，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span>[][] class_score = &#123; &#123; <span class="number">100</span>, <span class="number">99</span>, <span class="number">99</span> &#125;, &#123; <span class="number">100</span>, <span class="number">98</span>, <span class="number">97</span> &#125;, &#123; <span class="number">100</span>, <span class="number">100</span>, <span class="number">99.5</span> &#125;, &#123; <span class="number">99.5</span>, <span class="number">99</span>, <span class="number">98.5</span> &#125; &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span>[] row : class_score) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> value : row) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">100.0</span><br><span class="line">99.0</span><br><span class="line">99.0</span><br><span class="line">100.0</span><br><span class="line">98.0</span><br><span class="line">97.0</span><br><span class="line">100.0</span><br><span class="line">100.0</span><br><span class="line">99.5</span><br><span class="line">99.5</span><br><span class="line">99.0</span><br><span class="line">98.5</span><br></pre></td></tr></table></figure><p>提示：要想快速地打印一个二维数组的数据元素列表，可以调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(arrayName));</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(class_score));</span><br></pre></td></tr></table></figure><p>输出格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[100.0, 99.0, 99.0], [100.0, 98.0, 97.0], [100.0, 100.0, 99.5], [99.5, 99.0, 98.5]]</span><br></pre></td></tr></table></figure><h4 id="获取整行元素"><a href="#获取整行元素" class="headerlink" title="获取整行元素"></a>获取整行元素</h4><p>除了获取单个元素和全部元素之外，还可以单独获取二维数组的某一行中所有元素的值，或者二维数组中某一列元素的值。获取指定行的元素时，需要将行数固定，然后只遍历该行中的全部列即可。</p><p><strong>例 5</strong></p><p>编写一个案例，接收用户在控制台输入的行数，然后获取该行中所有元素的值。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span>[][] class_score = &#123; &#123; <span class="number">100</span>, <span class="number">99</span>, <span class="number">99</span> &#125;, &#123; <span class="number">100</span>, <span class="number">98</span>, <span class="number">97</span> &#125;, &#123; <span class="number">100</span>, <span class="number">100</span>, <span class="number">99.5</span> &#125;, &#123; <span class="number">99.5</span>, <span class="number">99</span>, <span class="number">98.5</span> &#125; &#125;;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前数组只有&quot;</span> + class_score.length + <span class="string">&quot;行，您想查看第几行的元素？请输入：&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> number = scan.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; class_score[number - <span class="number">1</span>].length; j++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span> + number + <span class="string">&quot;行的第[&quot;</span> + j + <span class="string">&quot;]个元素的值是：&quot;</span> + class_score[number - <span class="number">1</span>][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上述代码进行测试，输出结果如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前数组只有4行，您想查看第几行的元素？请输入：</span><br><span class="line">3</span><br><span class="line">第3行的第[0]个元素的值是：100.0</span><br><span class="line">第3行的第[1]个元素的值是：100.0</span><br><span class="line">第3行的第[2]个元素的值是：99.5</span><br></pre></td></tr></table></figure><h4 id="获取整列元素"><a href="#获取整列元素" class="headerlink" title="获取整列元素"></a>获取整列元素</h4><p>获取指定列的元素与获取指定行的元素相似，保持列不变，遍历每一行的该列即可。</p><p><strong>例 6</strong></p><p>编写一个案例，接收用户在控制台中输入的列数，然后获取二维数组中所有行中该列的值。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span>[][] class_score = &#123; &#123; <span class="number">100</span>, <span class="number">99</span>, <span class="number">99</span> &#125;, &#123; <span class="number">100</span>, <span class="number">98</span>, <span class="number">97</span> &#125;, &#123; <span class="number">100</span>, <span class="number">100</span>, <span class="number">99.5</span> &#125;, &#123; <span class="number">99.5</span>, <span class="number">99</span>, <span class="number">98.5</span> &#125; &#125;;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;您要获取哪一列的值？请输入：&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> number = scan.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; class_score.length; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第 &quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot; 行的第[&quot;</span> + number + <span class="string">&quot;]个元素的值是&quot;</span> + class_score[i][number]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上述代码进行测试，如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">您要获取哪一列的值？请输入：</span><br><span class="line">2</span><br><span class="line">第 1 行的第[2]个元素的值是99.0</span><br><span class="line">第 2 行的第[2]个元素的值是97.0</span><br><span class="line">第 3 行的第[2]个元素的值是99.5</span><br><span class="line">第 4 行的第[2]个元素的值是98.5</span><br></pre></td></tr></table></figure><h3 id="Java数组也是一种数据类型"><a href="#Java数组也是一种数据类型" class="headerlink" title="Java数组也是一种数据类型"></a>Java数组也是一种数据类型</h3><p><a href="http://c.biancheng.net/java/">Java</a> 的数组要求所有的数组元素具有相同的数据类型。因此，在一个数组中，数组元素的类型是唯一的，即一个数组里只能存储一种数据类型的数据，而不能存储多种数据类型的数据。</p><p>因为 Java 语言是面向对象的语言，而类与类之间可以支持继承关系（从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为），这样可能产生一个数组里可以存放多种数据类型的假象。例如有一个水果数组，要求每个数组元素都是水果，实际上数组元素既可以是苹果，也可以是香蕉（苹果、香蕉都继承了水果，都是一种特殊的水果），但这个数组的数组元素的类型还是唯一的，只能是水果类型。</p><p>一旦数组的初始化完成，数组在内存中所占的空间将被固定下来，因此数组的长度将不可改变。即使把某个数组元素的数据清空，但它所占的空间依然被保留，依然属于该数组，数组的长度依然不变。</p><p>Java 的数组既可以存储基本类型的数据，也可以存储引用类型的数据，只要所有的数组元素具有相同的类型即可。</p><p>值得指出的是，数组也是一种数据类型，它本身是一种引用类型。例如 int 是一个基本类型，但 int[]（这是定义数组的一种方式）就是一种引用类型了。</p><p>int[] 是一种类型吗？怎么使用这种类型呢？</p><p>没错，int[] 就是一种数据类型，与 int 类型、String 类型相似，一样可以使用该类型来定义变量，也可以使用该类型进行类型转换等。使用 int[] 类型来定义变量、进行类型转换时与使用其他普通类型没有任何区别。int[] 类型是一种引用类型，创建 int[] 类型的对象也就是创建数组，需要使用创建数组的语法。</p><h3 id="Java-Arrays工具类"><a href="#Java-Arrays工具类" class="headerlink" title="Java Arrays工具类"></a>Java Arrays工具类</h3><p>Arrays 类是一个工具类，其中包含了数组操作的很多方法。这个 Arrays 类里均为 static 修饰的方法（static 修饰的方法可以直接通过类名调用），可以直接通过 Arrays.xxx(xxx) 的形式调用方法。</p><h4 id="1）int-binarySearch-type-a-type-key"><a href="#1）int-binarySearch-type-a-type-key" class="headerlink" title="1）int binarySearch(type[] a, type key)"></a>1）int binarySearch(type[] a, type key)</h4><p>使用二分法查询 key 元素值在 a 数组中出现的索引，如果 a 数组不包含 key 元素值，则返回负数。调用该方法时要求数组中元素己经按升序排列，这样才能得到正确结果。</p><h4 id="2）int-binarySearch-type-a-int-fromIndex-int-toIndex-type-key"><a href="#2）int-binarySearch-type-a-int-fromIndex-int-toIndex-type-key" class="headerlink" title="2）int binarySearch(type[] a, int fromIndex, int toIndex, type key)"></a>2）int binarySearch(type[] a, int fromIndex, int toIndex, type key)</h4><p>这个方法与前一个方法类似，但它只搜索 a 数组中 fromIndex 到 toIndex 索引的元素。调用该方法时要求数组中元素己经按升序排列，这样才能得到正确结果。</p><h4 id="3）type-copyOf-type-original-int-length"><a href="#3）type-copyOf-type-original-int-length" class="headerlink" title="3）type[] copyOf(type[] original, int length)"></a>3）type[] copyOf(type[] original, int length)</h4><p>这个方法将会把 original 数组复制成一个新数组，其中 length 是新数组的长度。如果 length 小于 original 数组的长度，则新数组就是原数组的前面 length 个元素，如果 length 大于 original 数组的长度，则新数组的前面元索就是原数组的所有元素，后面补充 0（数值类型）、false（布尔类型）或者 null（引用类型）。</p><h4 id="4）type-copyOfRange-type-original-int-from-int-to"><a href="#4）type-copyOfRange-type-original-int-from-int-to" class="headerlink" title="4）type[] copyOfRange(type[] original, int from, int to)"></a>4）type[] copyOfRange(type[] original, int from, int to)</h4><p>这个方法与前面方法相似，但这个方法只复制 original 数组的 from 索引到 to 索引的元素。</p><h4 id="5）boolean-equals-type-a-type-a2"><a href="#5）boolean-equals-type-a-type-a2" class="headerlink" title="5）boolean equals(type[] a, type[] a2)"></a>5）boolean equals(type[] a, type[] a2)</h4><p>如果 a 数组和 a2 数组的长度相等，而且 a 数组和 a2 数组的数组元素也一一相同，该方法将返回 true。</p><h4 id="6）void-fill-type-a-type-val"><a href="#6）void-fill-type-a-type-val" class="headerlink" title="6）void fill(type[] a, type val)"></a>6）void fill(type[] a, type val)</h4><p>该方法将会把 a 数组的所有元素都赋值为 val。</p><h4 id="7）void-fill-type-a-int-fromIndex-int-toIndex-type-val"><a href="#7）void-fill-type-a-int-fromIndex-int-toIndex-type-val" class="headerlink" title="7）void fill(type[] a, int fromIndex, int toIndex, type val)"></a>7）void fill(type[] a, int fromIndex, int toIndex, type val)</h4><p>该方法与前一个方法的作用相同，区别只是该方法仅仅将 a 数组的 fromIndex 到 toIndex 索引的数组元素赋值为 val。</p><h4 id="8）void-sort-type-a"><a href="#8）void-sort-type-a" class="headerlink" title="8）void sort(type[] a)"></a>8）void sort(type[] a)</h4><p>该方法对 a 数组的数组元素进行排序。</p><h4 id="9）void-sort-type-a-int-fromIndex-int-toIndex"><a href="#9）void-sort-type-a-int-fromIndex-int-toIndex" class="headerlink" title="9）void sort(type[] a, int fromIndex, int toIndex)"></a>9）void sort(type[] a, int fromIndex, int toIndex)</h4><p>该方法与前一个方法相似，区别是该方法仅仅对 fromIndex 到 toIndex 索引的元素进行排序。</p><h4 id="10）String-toString-type-a"><a href="#10）String-toString-type-a" class="headerlink" title="10）String toString(type[] a)"></a>10）String toString(type[] a)</h4><p>该方法将一个数组转换成一个字符串。该方法按顺序把多个数组元素连缀在一起，多个数组元素使用英文逗号<code>,</code>和空格隔开。</p><hr><p><strong>下面程序示范了 Arrays 类的用法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个a数组</span></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">        <span class="comment">// 定义一个a2数组</span></span><br><span class="line">        <span class="keyword">int</span>[] a2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">        <span class="comment">// a数组和a2数组的长度相等，毎个元素依次相等，将输出true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a数组和a2数组是否相等：&quot;</span> + Arrays.equals(a, a2));</span><br><span class="line">        <span class="comment">// 通过复制a数组，生成一个新的b数组</span></span><br><span class="line">        <span class="keyword">int</span>[] b = Arrays.copyOf(a, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a数组和b数组是否相等：&quot;</span> + Arrays.equals(a, b));</span><br><span class="line">        <span class="comment">// 输出b数组的元素，将输出[3, 4, 5, 6, 0, 0]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b 数组的元素为：&quot;</span> + Arrays.toString(b));</span><br><span class="line">        <span class="comment">// 将b数组的第3个元素（包括）到第5个元素（不包括）賦值为1</span></span><br><span class="line">        Arrays.fill(b, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 输出b数组的元素，将输出[3, 4, 1, 1, 0, 0]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b 数组的元素为：&quot;</span> + Arrays.toString(b));</span><br><span class="line">        <span class="comment">// 对b数组进行排序</span></span><br><span class="line">        Arrays.sort(b);</span><br><span class="line">        <span class="comment">// 输出b数组的元素.将输出[0,0,1,1,3,4]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b数组的元素为：&quot;</span> + Arrays.toString(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Arrays 类处于 java.util 包下，为了在程序中使用 Arrays 类，必须在程序中导入 java.util.Arrays 类。</p><p>除此之外，在 System 类里也包含了一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static void arraycopy(Object src, int srePos, Object dest, int dcstPos, int length)</span><br></pre></td></tr></table></figure><p>方法，该方法可以将 src 数组里的元素值赋给 dest 数组的元素，其中 srcPos 指定从 src 数组的第几个元素开始赋值，length 参数指定将 src 数组的多少个元素值赋给 dest 数组的元素。</p><p><a href="http://c.biancheng.net/java/">Java</a> 8 增强了 Arrays 类的功能，为 Arrays 类增加了一些工具方法，这些工具方法可以充分利用多 CPU 并行的能力来提高设值、排序的性能。下面是 Java 8 为 Arrays 类增加的工具方法。</p><p>提示：由于计算机硬件的飞速发展，目前几乎所有家用 PC 都是 4 核、8 核的 CPU，而服务器的 CPU 则具有更好的性能，因此 Java 8 与时俱进地增加了并发支持，并发支持可以充分利用硬件设备来提高程序的运行性能。</p><h3 id="Java冒泡排序法（非常重要）"><a href="#Java冒泡排序法（非常重要）" class="headerlink" title="Java冒泡排序法（非常重要）"></a>Java冒泡排序法（非常重要）</h3><p>冒泡排序（Bubble Sort）是常用的数组排序算法之一，它以简洁的思想与实现方法而备受青睐，也是广大学习者最先接触的一种排序算法。</p><p>冒泡排序的基本思想是：对比相邻的元素值，如果满足条件就交换元素值，把较小的元素值移动到数组前面，把大的元素值移动到数组后面（也就是交换两个元素的位置），这样数组元素就像气泡一样从底部上升到顶部。</p><p>冒泡排序的算法比较简单，排序的结果稳定，但时间效率不太高。<a href="http://c.biancheng.net/java/">Java</a> 中的冒泡排序在双层循环中实现，其中外层循环控制排序轮数，总循环次数为要排序数组的长度减 1。而内层循环主要用于对比相邻元素的大小，以确定是否交换位置，对比和交换次数依排序轮数而减少。</p><p><strong>例 1</strong></p><p>获取用户在控制台输入的 5 个成绩信息，将这些成绩保存到数组中，然后对数组应用冒泡排序，并输出排序后的结果，实现步骤如下。</p><p>(1) 创建一个 Test24 类文件，在 main() 方法中开始编码。首先创建 Scanner 类的实例后声明 double 类型的 score 数组，然后接收用户在控制台输入的成绩，并保存到元素中。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">double</span>[] score = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length; i++) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入第 &quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot; 个成绩：&quot;</span>);</span><br><span class="line">        score[i] = scan.nextDouble();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 在对 score 数组排序之前，首先输出数组中各个元素的值。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;排序前的元素值：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> val:score) &#123;</span><br><span class="line">    System.out.print(val+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p>(3) 通过冒泡排序方法实现对 score 数组的排序，在实现时需要借助一个临时变量。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;通过冒泡排序方法对数组进行排序：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 比较相邻两个元素，较大的数往后冒泡</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (score[j] &gt; score[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">double</span> temp = score[j + <span class="number">1</span>]; <span class="comment">// 把第一个元素值保存到临时变量中</span></span><br><span class="line">                score[j + <span class="number">1</span>] = score[j]; <span class="comment">// 把第二个元素值转移到第一个元素变量中</span></span><br><span class="line">                score[j] = temp; <span class="comment">// 把临时变量（第一个元素的原值）保存到第二个元素中</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(score[j] + <span class="string">&quot; &quot;</span>); <span class="comment">// 对排序后的数组元素进行输出</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;【&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = score.length - <span class="number">1</span> - i; j &lt; score.length; j++) &#123;</span><br><span class="line">            System.out.print(score[j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) 运行前面的代码进行测试，如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">请输入第 1 个成绩：77</span><br><span class="line">请输入第 2 个成绩：90</span><br><span class="line">请输入第 3 个成绩：68</span><br><span class="line">请输入第 4 个成绩：59</span><br><span class="line">请输入第 5 个成绩：80</span><br><span class="line">排序前的元素值：</span><br><span class="line">77.0    90.0    68.0    59.0    80.0   </span><br><span class="line">通过冒泡排序方法对数组进行排序：</span><br><span class="line">77.0 68.0 59.0 80.0 【90.0 】</span><br><span class="line">68.0 59.0 77.0 【80.0 90.0 】</span><br><span class="line">59.0 68.0 【77.0 80.0 90.0 】</span><br><span class="line">59.0 【68.0 77.0 80.0 90.0 】</span><br></pre></td></tr></table></figure><h4 id="Java快速排序法（Quicksort）"><a href="#Java快速排序法（Quicksort）" class="headerlink" title="Java快速排序法（Quicksort）"></a>Java快速排序法（Quicksort）</h4><p>快速排序（Quicksort）是对冒泡排序的一种改进，是一种排序执行效率很高的排序算法。</p><p>快速排序的基本思想是：通过一趟排序，将要排序的数据分隔成独立的两部分，其中一部分的所有数据比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此使整个数据变成有序序列。</p><p>具体做法是：假设要对某个数组进行排序，首先需要任意选取一个数据（通常选用第一个数据）作为关键数据，然后将所有比它小的数都放到它的前面，所有比它大的数都放到它的后面。这个过程称为一趟快速排序；递归调用此过程，即可实现数据的快速排序。</p><p><strong>例 1</strong></p><p>利用快速排序法对一数组进行排序，实现步骤如下。</p><p>(1) 声明静态的 getMiddle() 方法，该方法需要返回一个 int 类型的参数值，在该方法中传入 3 个参数。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = list[low]; <span class="comment">// 数组的第一个值作为中轴（分界点或关键数据）</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; list[high] &gt; tmp) &#123;</span><br><span class="line">            high--;</span><br><span class="line">        &#125;</span><br><span class="line">        list[low] = list[high]; <span class="comment">// 比中轴小的记录移到低端</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; list[low] &lt; tmp) &#123;</span><br><span class="line">            low++;</span><br><span class="line">        &#125;</span><br><span class="line">        list[high] = list[low]; <span class="comment">// 比中轴大的记录移到高端</span></span><br><span class="line">    &#125;</span><br><span class="line">    list[low] = tmp; <span class="comment">// 中轴记录到尾</span></span><br><span class="line">    <span class="keyword">return</span> low; <span class="comment">// 返回中轴的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 创建静态的 unckSort() 方法，在该方法中判断 low 参数是否小于 high 参数，如果是则调用 getMiddle() 方法，将数组一分为二，并且调用自身的方法进行递归排序。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unckSort</span><span class="params">(<span class="keyword">int</span>[] list,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> middle = getMiddle(list,low,high);    <span class="comment">// 将list数组一分为二</span></span><br><span class="line">        unckSort(list,low,middle-<span class="number">1</span>);    <span class="comment">// 对低字表进行递归排序</span></span><br><span class="line">        unckSort(list,middle+<span class="number">1</span>,high);    <span class="comment">// 对高字表进行递归排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 声明静态的 quick() 方法，在该方法中判断传入的数组是否为空，如果不为空，则调用 unckSort() 方法进行排序。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 查看数组是否为空</span></span><br><span class="line">        unckSort(str,<span class="number">0</span>,str.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) 在 main() 方法中声明 int 类型的 number 数组，接着输出该数组中的元素。然后调用自定义的 quick() 方法进行排序，排序后重新输出数组中的元素。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] number=&#123;<span class="number">13</span>,<span class="number">15</span>,<span class="number">24</span>,<span class="number">99</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;排序前：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> val:number) &#123;</span><br><span class="line">    System.out.print(val+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">quick(number);</span><br><span class="line">System.out.println(<span class="string">&quot;\n排序后：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> val:number) &#123;</span><br><span class="line">    System.out.print(val +<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行前面的代码进行测试，输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">排序前：</span><br><span class="line">13 15 24 99 14 11 1 2 3</span><br><span class="line">排序后：</span><br><span class="line">1 2 3 11 13 14 15 24 99 </span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-循环语句</title>
      <link href="/2020/05/12/Java%E7%AC%94%E8%AE%B0-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/05/12/Java%E7%AC%94%E8%AE%B0-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>循环是程序中的重要流程结构之一。循环语句能够使程序代码重复执行，适用于需要重复一段代码直到满足特定条件为止的情况。</p><p>所有流行的编程语言中都有循环语句。<a href="http://c.biancheng.net/java/">Java</a> 中采用的循环语句与C语言中的循环语句相似，主要有 while、do-while 和 for。另外 Java 5 之后推出了 for-each 循环语句，for-each 循环是 for 循环的变形，它是专门为集合遍历而设计的。for-each 并不是一个关键字。</p><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体。当反复执行这个循环体时，需要在合适的时候把循环条件改为假，从而结束循环，否则循环将一直执行下去，形成死循环。</p><p>循环语句可能包含如下 4 个部分。</p><ul><li>初始化语句（init statement）： 一条或多条语句，这些语句用于完成一些初始化工作，初始化语句在循环开始之前执行。</li><li>循环条件（test_expression）：这是一个 boolean 表达式，这个表达式能决定是否执行循环体。</li><li>循环体（body_statement）：这个部分是循环的主体，如果循环条件允许，这个代码块将被重复执行。如果这个代码块只有一行语句，则这个代码块的花括号是可以省略的。</li><li>迭代语句（iteration_statement）：这个部分在一次循环体执行结束后，对循环条件求值之前执行，通常用于控制循环条件中的变量，使得循环在合适的时候结束。</li></ul><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><p>while 语句是 Java 最基本的循环语句，是一种先判断的循环结构，可以在一定条件下重复执行一段代码。该语句需要判断一个测试条件，如果该条件为真，则执行循环语句（循环语句可以是一条或多条），否则跳出循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中语句块中的代码可以是一条或者多条语句，而条件表达式是一个有效的 boolean 表达式，它决定了是否执行循环体。当条件表达式的值为 true 时，就执行大括号中的语句块。</p><p>执行完毕，再次检查表达式是否为 true，如果还为 true，则再次执行大括号中的代码，否则就跳出循环，执行 while 循环之后的代码。图 1 表示了 while 循环语句的执行流程。</p><p><img src="http://c.biancheng.net/uploads/allimg/180928/3-1P92QHR5F9.jpg" alt="img"></p><p><strong>例 1</strong></p><p>使用 while 语句计算 10 的阶乘，其具体代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        n=n*i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;10的阶乘结果为：&quot;</span>+n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，定义了两个变量 i 和 n，循环每执行一次 i 值就加 1，判断 i 的值是否小于等于 10，并利用 n=n*i 语句来实现阶乘。当 i 的值大于 10 之后，循环便不再执行并退出循环。</p><p>运行程序，执行的结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 的阶乘结果为：3628800</span><br></pre></td></tr></table></figure><h4 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while 语句"></a>do-while 语句</h4><p>如你刚才所见，如果 while 循环一开始条件表达式就是假的，那么循环体就根本不被执行。然而，有时需要在开始时条件表达式即使是假的情况下，while 循环至少也要执行一次。换句话说，有时你需要在一次循环结束后再测试中止表达式，而不是在循环开始时。</p><p>幸运的是，Java就提供了这样的循环：do-while循环。do-while 循环语句也是 Java 中运用广泛的循环语句，它由循环条件和循环体组成，但它与 while 语句略有不同。<code>do-while 循环语句的特点是先执行循环体，然后判断循环条件是否成立。</code></p><p>do-while 语句的语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure><p>以上语句的执行过程是，首先执行一次循环操作，然后再判断 while 后面的条件表达式是否为 true，如果循环条件满足，循环继续执行，否则退出循环。while 语句后必须以分号表示循环结束.</p><p><img src="http://c.biancheng.net/uploads/allimg/180928/3-1P92QH615B1.jpg" alt="img"></p><p><strong>例2</strong></p><p>编写一个程序，计算 10 的阶乘。使用 do-while 循环的实现代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">1</span>,result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        result*=number;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(number &lt;= <span class="number">10</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;10阶乘结果是：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行后输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 阶乘结果是：3628800</span><br></pre></td></tr></table></figure><p><strong>例 3</strong></p><p>在一个图书系统的推荐图书列表中保存了 50 条信息，现在需要让它每行显示 10 条，分 5 行进行显示。下面使用 do-while 循环语句来实现这个效果，其具体代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bookIndex = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        System.out.print(bookIndex+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(bookIndex%<span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        bookIndex++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(bookIndex&lt;<span class="number">51</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中， 声明一个变量 bookIndex 用来保存图书的索引，该变量赋值为 1 表示从第一本开始。在 do-while 循环体内，首先输出了 bookIndex 的值，然后判断 bookIndex 是否能被 10 整除，如果可以则说明当前行已经输出 10 条，用 System.out.println() 语句输出了一个换行符。之后使 bookIndex 加 1，相当于更新当前的索引。最后在 while 表达式中判断是否超出循环的范围，即 50 条以内。</p><p>运行程序，执行的结果如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">11 12 13 14 15 16 17 18 19 20</span><br><span class="line">21 22 23 24 25 26 27 28 29 30</span><br><span class="line">31 32 33 34 35 36 37 38 39 40</span><br><span class="line">41 42 43 44 45 46 47 48 49 50</span><br></pre></td></tr></table></figure><h4 id="while和do-while的比较"><a href="#while和do-while的比较" class="headerlink" title="while和do-while的比较"></a>while和do-while的比较</h4><p>while 循环和 do-while 循环的相同处是：都是循环结构，使用 while(循环条件) 表示循环条件，使用大括号将循环操作括起来。</p><p>while 循环和 do-while 循环的不同处如下：</p><ul><li>语法不同：与 while 循环相比，do-while 循环将 while 关键字和循环条件放在后面，而且前面多了 do 关键字，后面多了一个分号。</li><li>执行次序不同：while 循环先判断，再执行。do-while 循环先执行，再判断。</li><li>一开始循环条件就不满足的情况下，while 循环一次都不会执行，do-while 循环则不管什么情况下都至少执行一次。</li></ul><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><p>for 语句是应用最广泛、功能最强的一种循环语句。大部分情况下，for 循环可以代替 while 循环、do while 循环。</p><p>for 语句是一种在程序执行前就要先判断条件表达式是否为真的循环语句。假如条件表达式的结果为假，那么它的循环语句根本不会执行。for 语句通常使用在知道循环次数的循环中。</p><p>for 语句语法格式如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(条件表达式1;条件表达式2;条件表达式3) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for 循环中 3 个条件表达式的含义如表 1 所示。</p><table><thead><tr><th>表达式</th><th>形式</th><th>功能</th><th>举例</th></tr></thead><tbody><tr><td>条件表达式 1</td><td>赋值语句</td><td>循环结构的初始部分，为循环变量赋初值</td><td>int i=1</td></tr><tr><td>条件表达式 2</td><td>条件语句</td><td>循环结构的循环条件</td><td>i&gt;40</td></tr><tr><td>条件表达式 3</td><td>迭代语句，通常使用 ++ 或 – 运算符</td><td>循环结构的迭代部分，通常用来修改循环 变量的值</td><td>i++</td></tr></tbody></table><p>for 关键字后面括号中的 3 个条件表达式必须用“;”隔开。for 循环中的这 3 部分以及大括号中使循环体必需的 4 个组成部分完美地结合在一起，简单明了。</p><p>for 循环语句执行的过程为：首先执行条件表达式 1 进行初始化，然后判断条件表达式 2 的值是否为 true，如果为 true，则执行循环体语句块；否则直接退出循环。最后执行表达式 3，改变循环变量的值，至此完成一次循环。接下来进行下一次循环，直到条件表达式 2 的值为 false，才结束循环，其运行流程如图 1 所示。</p><p><img src="http://c.biancheng.net/uploads/allimg/180929/3-1P92Z93211K2.jpg" alt="img"></p><p>值得指出的是，for 循环的循环迭代语句并没有与循环体放在一起，因此即使在执行循环体时遇到 continue 语句结束本次循环，循环迭代语句也一样会得到执行。</p><p>for 循环和 while、do while 循环不一样：由于 while、do while 循环的循环迭代语句紧跟着循环体，因此如果循环体不能完全执行，如使用 continue 语句来结束本次循环，则循环迭代语句不会被执行。但 for 循环的循环迭代语句并没有与循环体放在一起，因此不管是否使用 continue 语句来结束本次循环，循环迭代语句一样会获得执行。</p><blockquote><p>与前面循环类似的是，如果循环体只有一行语句，那么循环体的大括号可以省略。</p></blockquote><p>例如，同样是计算 5 的阶乘，使用 for 循环的实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> number = <span class="number">1</span>; number &lt;= <span class="number">5</span>; number++) &#123;</span><br><span class="line">        result *= number;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">&quot;5 的阶乘结果是：&quot;</span> + result);   <span class="comment">// 输出&quot;5的阶乘结果是：120&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述语句的含义可以理解为，将 number 变量的值从 1 开始，每次递增 1，直到大于 5 时终止循环。在循环过程中，将 number 的值与当前 result 的值进行相乘。</p><p>for 语句中初始化、循环条件以及迭代部分都可以为空语句（但分号不能省略），三者均为空的时候，相当于一个无限循环。下面对这些情况依次进行介绍。</p><p><strong>1．条件表达式 1 为空</strong></p><p>for 语句中条件表达式 1 的作用可以在程序的其他位置给出，所以当条件表达式 1 为空时，for 语句后面括号内其他条件表达式执行的顺序不变。</p><p>例如，使用 for 语句的这种形式计算 1~100 所有奇数的和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">1</span>; <span class="comment">// 相当于for语句的第1个表达式</span></span><br><span class="line">    <span class="keyword">for</span> (; number &lt; <span class="number">101</span>; number++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> != <span class="number">0</span>) <span class="comment">// 如果不能整除2，说明是奇数，则进行累加</span></span><br><span class="line">            result += number;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">&quot;100 以内所有奇数和为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后的输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100 以内所有奇数和为：2500</span><br></pre></td></tr></table></figure><p><strong>2．条件表达式 2 为空</strong></p><p>当 for 语句中条件表达式 2 为空时，将没有循环的终止条件。此时 for 语句会认为条件表达式 2 的值总是为真，循环无限制执行下去。因此，为了使循环达到某种条件时退出，需要在语句块中进行逻辑判断，并使用 break 语句来跳出循环，否则将产生死循环。</p><p>同样是计算 1~100 所有奇数的和，使用这种方式的代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> number = <span class="number">1</span>;; number++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 相当于for语句的表达式2，满足时就退出for循环</span></span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> != <span class="number">0</span>) <span class="comment">// 如果不能整除2，说明是奇数，则进行累加</span></span><br><span class="line">            result += number;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">&quot;100 以内所有奇数和为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3．条件表达式 3 为空</strong></p><p>当 for 语言中条件表达式 3 为空时，也就没有设置控制变量的表达式，即每次循环之后无法改变变量的值，此时也无法保证循环正常结束。</p><p>同样是计算1~100 所有奇数的和，使用这种方式的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> number = <span class="number">1</span>; number &lt; <span class="number">101</span>;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> != <span class="number">0</span>) <span class="comment">// 如果不能整除2，说明是奇数，则进行累加</span></span><br><span class="line">            result += number;</span><br><span class="line">        number++; <span class="comment">// 相当于for语句的条件表达式3，每次递增1</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">&quot;100 以内所有奇数和为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有循环体语句，number 变量的值为 1，永远小于 101，因此将无法结束循环，形成无限循环。在上面代码中将 number 的递增语句放在 for 循环体内，效果与完整 for 语句功能相同。</p><p><strong>4．3 个条件表达式都为空</strong></p><p>在 for 循环语句中，无论缺少哪部分条件表达式，都可以在程序的其他位置补充，从而保持 for 循环语句的完整性，使循环正常进行。</p><p>当 for 语句中循环体全为空时，即没有循环初值，不判断循环条件，循环变量不增值，此时无条件执行循环体，形成无限循环或者死循环。对于这种情况，读者在使用时应该尽量避免。</p><p>例如，计算 1~100 所有奇数的和，使用这种方式的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">1</span>; <span class="comment">// 相当于for语句的条件表达式1</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 相当于for语句的条件表达式2</span></span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> != <span class="number">0</span>) <span class="comment">// 如果不能整除2，说明是奇数，则进行累加</span></span><br><span class="line">            result += number;</span><br><span class="line">        number++; <span class="comment">// 相当于for语句的条件表达式3</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">&quot;100 以内所有奇数和为： &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例1</strong></p><p>编写一个 <a href="http://c.biancheng.net/java/">Java</a> 程序，统计某超市上半年的总销售量，要求由用户输入每月的销量。使用 for 循环的实现代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第&quot;</span> + i + <span class="string">&quot; 个月的销售数量：&quot;</span>);</span><br><span class="line">        num = sc.nextInt();</span><br><span class="line">        sum += num;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;上半年的销售总量为：&quot;</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该程序中, 声明循环变量 i，控制循环的次数，它被初始化为 1。每执行一次循环，都要对 i 进行判断，看其值是否小于等于 6，条件成立则继续累加成绩，否则退出循环。</p><p>每执行完一次循环体，都会对 i 累加 1。如此循环重复，直到 i 的值大于 6 时停止循环。此时退出 for 循环体，执行最下方的语句输出累加的销售总量。</p><h4 id="for循环嵌套"><a href="#for循环嵌套" class="headerlink" title="for循环嵌套"></a>for循环嵌套</h4><p>和其他编程语言一样，<a href="http://c.biancheng.net/java/">Java</a> 允许循环嵌套。如果把一个循环放在另一个循环体内，那么就可以形成嵌套循环。</p><p>嵌套循环既可以是 for循环嵌套 while 循环，也可以是 while 循环嵌套 do-while 循环 …… 即各种类型的循环都可以作为外层循环，也可以作为内层循环。</p><p>当程序遇到嵌套循环时，如果外层循环的循环条件允许，则开始执行外层循环的循环体，而内层循环将被外层循环的循环体来执行——只是内层循环需要反复执行自己的循环体而已。</p><p>当内层循环执行结束，且外层循环的循环体执行结束时，则再次计算外层循环的循环条件，决定是否再次开始执行外层循环的循环体。</p><p>根据上面分析，假设外层循环的循环次数为 n 次，内层循环的循环次数为 m 次，那么内层循环的循环体实际上需要执行 n×m 次。嵌套循环的执行流程如图所示。</p><p><img src="http://c.biancheng.net/uploads/allimg/190918/5-1Z91Q456014E.jpg" alt="嵌套循环的执行流程"></p><p>从图 1 来看，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为 false 时，才会完全跳出内层循环，才可以结束外层循环的当次循环，开始下一次循环。下面是一个使用嵌套循环输出九九乘法表实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;乘法口诀表：&quot;</span>);</span><br><span class="line">    <span class="comment">// 外层循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            System.out.print(j + <span class="string">&quot;*&quot;</span> + i + <span class="string">&quot;=&quot;</span> + j * i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面程序，看到如下运行结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">乘法口诀表：</span><br><span class="line">1*1=1</span><br><span class="line">1*2=2 2*2=4</span><br><span class="line">1*3=3 2*3=6 3*3=9</span><br><span class="line">1*4=4 2*4=8 3*4=12 4*4=16</span><br><span class="line">1*5=5 2*5=10 3*5=15 4*5=20 5*5=25</span><br><span class="line">1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36</span><br><span class="line">1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49</span><br><span class="line">1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64</span><br><span class="line">1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81</span><br></pre></td></tr></table></figure><p>从上面运行结果可以看出，进入嵌套循环时，循环变量 i 开始为 1，这时即进入了外层循环。进入外层循环后，内层循环把 i 当成一个普通变量，其值为 0。在外层循环的当次循环里，内层循环就是一 个普通循环。</p><p>实际上，嵌套循环不仅可以是两层嵌套，而且可以是三层嵌套、四层嵌套 …… 不论循环如何嵌套, 总可以把内层循环当成外层循环的循环体来对待，区别只是这个循环体里包含了需要反复执行的代码。</p><h4 id="for-each语句"><a href="#for-each语句" class="headerlink" title="for each语句"></a>for each语句</h4><p>foreach 循环语句是 <a href="http://c.biancheng.net/java/">Java</a> 1.5 的新特征之一，在遍历数组、集合方面，foreach 为开发者提供了极大的方便。foreach 循环语句是 for 语句的特殊简化版本，主要用于执行遍历功能的循环。</p><p>foreach 循环语句的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(类型 变量名:集合) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，“类型”为集合元素的类型，“变量名”表示集合中的每一个元素，“集合”是被遍历的集合对象或数组。每执行一次循环语句，循环变量就读取集合中的一个元素，其执行流程如图所示。</p><p><img src="http://c.biancheng.net/uploads/allimg/180929/3-1P929101250L5.jpg" alt="img"></p><p><strong>例1</strong></p><p>假设有一个数组，采用 for 语句遍历数组的方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明并初始化数组</span></span><br><span class="line"><span class="keyword">int</span>[] numbers = &#123; <span class="number">43</span>, <span class="number">32</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">75</span>, <span class="number">7</span>, <span class="number">10</span> &#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;----for----&quot;</span>);</span><br><span class="line"><span class="comment">// for语句</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Count is:&quot;</span> + numbers[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述第 2 行语句声明并初始化了 7 个元素数组集合，目前大家只需要知道当初始化数组时，要把相同类型的元素放到 {…} 中并且用逗号分隔（,）即可。</p><p>关于数组集合会在教程后面详细介绍，这里我们只需要大概了解就可以。numbers.length 是获得数组的长度，length 是数组的属性，numbers[i] 是通过数组下标访问数组元素。</p><p>那么采用 for-each 循环语句遍历数组的方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明并初始化int数组</span></span><br><span class="line"><span class="keyword">int</span>[] numbers = &#123; <span class="number">43</span>, <span class="number">32</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">75</span>, <span class="number">7</span>, <span class="number">10</span> &#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;----for each----&quot;</span>);</span><br><span class="line"><span class="comment">// for-each语句</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> item : numbers) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Count is:&quot;</span> + item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从示例中可以发现，item 不是循环变量，它保存了集合中的元素，for-each 语句将集合中的元素一一取出来，并保存到 item 中，这个过程中不需要使用循环变量，通过数组下标访问数组中的元素。可见 for-each 语句在遍历集合的时候要简单方便得多。</p><h4 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h4><p>return 关键字并不是专门用于结束循环的，return 语句用于终止函数的执行或退出类的方法，并把控制权返回该方法的调用者。如果这个方法带有返回类型，return 语句就必须返回这个类型的值；如果这个方法没有返回值，可以使用没有表达式的 return 语句。</p><p>return 语句的一般语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return 与方法相同类型的变量;</span><br></pre></td></tr></table></figure><p>如果一个方法使用了 return 语句并且后面跟有该方法返回类型的值，那么调用此方法后，所得到的结果为该方法返回的值。</p><p><strong>例 1</strong></p><p>当用户输入两个 double 类型的数值后需要计算这两个数值之和，而这两个操作数是可以变动的，但是求和的功能是不变的，这时就需要定义一个方法，只要在需要求和时调用该方法即可，该方法将计算之后的结果返回。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入操作数1：&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> num1 = input.nextDouble(); <span class="comment">// 获取用户输入的操作数1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入操作数2：&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> num2 = input.nextDouble(); <span class="comment">// 获取用户输入的操作数2</span></span><br><span class="line">        <span class="keyword">double</span> d = sum(num1, num2);</span><br><span class="line">        System.out.println(num1 + <span class="string">&quot;+&quot;</span> + num2 + <span class="string">&quot;=&quot;</span> + d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建sum() 方法，返回double 类型的数值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 操作数1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j 操作数2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个操作数之和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = i + j;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当用户输入两个 double 类型的数值后，程序调用 sum() 方法。该方法有两个参数，分别表示用户输入的操作数 1 和操作数 2。在调用该方法时，只需要将用户输入的两个数值传递过去即可，然后程序会执行 sum() 方法，对这两个数求和，并使用 return 语句将计算得出的结果返回。</p><p>在 main() 方法中，同样需要使用 double 类型的变量来接收 sum() 方法返回的值，即变量 d 为计算后的结果。</p><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><p>某些时候需要在某种条件出现时强行终止循环，而不是等到循环条件为 false 时才退出循环。此时，可以使用 break 来完成这个功能。</p><p>break 用于完全结束一个循环，跳出循环体。不管是哪种循环，一旦在循环体中遇到 break，系统将完全结束该循环，开始执行循环之后的代码。</p><p>在 <a href="http://c.biancheng.net/java/">Java</a> 中，break 语句有 3 种作用，分别是：在 switch 语句中终止一个语句序列、使用 break 语句直接强行退出循环和使用 break 语句实现 goto 的功能。</p><p><strong>使用 break 语句直接强行退出循环（break 不带标签）</strong></p><p>可以使用 break 语句强行退出循环，忽略循环体中的任何其他语句和循环的条件判断。在循环中遇到 break 语句时，循环被终止，在循环后面的语句重新开始。</p><p><strong>例1</strong></p><p>小明参加了一个 1000 米的长跑比赛，在 100 米的跑道上，他循环地跑着，每跑一圈，剩余路程就会减少 100 米，要跑的圈数就是循环的次数。但是，在每跑完一圈时，教练会问他是否要坚持下去，如果回答 y，则继续跑，否则表示放弃。</p><p>使用 break 语句直接强行退出循环的示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner input = <span class="keyword">new</span> Scanner(System.in); <span class="comment">// 定义变量存储小明的回答</span></span><br><span class="line">    String answer = <span class="string">&quot;&quot;</span>; <span class="comment">// 一圈100米，1000米为10圈，即为循环的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑的是第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;圈&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;还能坚持吗？&quot;</span>); <span class="comment">// 获取小明的回答</span></span><br><span class="line">        answer = input.next(); <span class="comment">// 判断小明的回答是否为y？如果不是，则放弃，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (!answer.equals(<span class="string">&quot;y&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;放弃&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环之后的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加油！继续！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序运行后的效果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">跑的是第1圈</span><br><span class="line">还能坚持吗？</span><br><span class="line">y</span><br><span class="line">加油！继续！</span><br><span class="line">跑的是第2圈</span><br><span class="line">还能坚持吗？</span><br><span class="line">y</span><br><span class="line">加油！继续！</span><br><span class="line">跑的是第3圈</span><br><span class="line">还能坚持吗？</span><br><span class="line">n</span><br><span class="line">放弃</span><br></pre></td></tr></table></figure><p>尽管 for 循环被设计为从 0 执行到 10，但是当小明的回答不是 y 时，break 语句终止了程序的循环，继续执行循环体外的代码，输出“加油！继续！”。</p><p>break 语句能用于任何 Java 循环中，包括人们有意设置的无限循环。在一系列嵌套循环中使用 break 语句时，它将仅仅终止最里面的循环。<strong>例如：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 外循环，循环5次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;次循环：&quot;</span>);</span><br><span class="line">        <span class="comment">// 内循环，设计为循环10次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 判断j是否等于3，如果是，则终止循环</span></span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;内循环的第&quot;</span> + (j + <span class="number">1</span>) + <span class="string">&quot;次循环\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序运行结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第1次循环：内循环的第1次循环 内循环的第2次循环 内循环的第3次循环</span><br><span class="line">第2次循环：内循环的第1次循环 内循环的第2次循环 内循环的第3次循环</span><br><span class="line">第3次循环：内循环的第1次循环 内循环的第2次循环 内循环的第3次循环</span><br><span class="line">第4次循环：内循环的第1次循环 内循环的第2次循环 内循环的第3次循环</span><br><span class="line">第5次循环：内循环的第1次循环 内循环的第2次循环 内循环的第3次循环</span><br></pre></td></tr></table></figure><p>从程序运行结果来看，在内部循环中的 break 语句仅仅终止了所在的内部循环，外部循环没有受到任何的影响。</p><p><strong>注意：</strong><code>一个循环中可以有一个以上的 break 语句，但是过多的 break 语句会破坏代码结构。switch 循环语句中的 break 仅影响 switch 语句，不会影响循环。</code></p><p><strong>例 2</strong></p><p>编写一个 Java 程序，允许用户输入 6 门课程成绩，如果录入的成绩为负则跳出循环；如果录入 6 门合法成绩，则计算已有成绩之和。</p><p>使用 break 语句的实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score; <span class="comment">// 每门课的成绩</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 成绩之和</span></span><br><span class="line">    <span class="keyword">boolean</span> con = <span class="keyword">true</span>; <span class="comment">// 记录录入的成绩是否合法</span></span><br><span class="line">    Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入学生的姓名：&quot;</span>);</span><br><span class="line">    String name = input.next(); <span class="comment">// 获取用户输入的姓名</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第&quot;</span> + i + <span class="string">&quot;门课程的成绩：&quot;</span>);</span><br><span class="line">        score = input.nextInt();<span class="comment">// 获取用户输入的成绩</span></span><br><span class="line">        <span class="keyword">if</span> (score &lt; <span class="number">0</span>) &#123; <span class="comment">// 判断用户输入的成绩是否为负数，如果为负数，终止循环</span></span><br><span class="line">            con = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = sum + score; <span class="comment">// 累加求和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (con) &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;的总成绩为：&quot;</span> + sum);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抱歉，分数录入错误，请重新录入！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，当用户录入的分数低于 0 时，则输出“抱歉，分数录入错误，请重新录入！”信息，否则打印学生的总成绩。输出结果如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请输入学生的姓名：</span><br><span class="line">zhangpu</span><br><span class="line">请输入第1门课程的成绩：</span><br><span class="line">100</span><br><span class="line">请输入第2门课程的成绩：</span><br><span class="line">75</span><br><span class="line">请输入第3门课程的成绩：</span><br><span class="line">-8</span><br><span class="line">抱歉，分数录入错误，请重新录入！</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">请输入学生的姓名：</span><br><span class="line">zhangpu</span><br><span class="line">请输入第1门课程的成绩：</span><br><span class="line">100</span><br><span class="line">请输入第2门课程的成绩：</span><br><span class="line">68</span><br><span class="line">请输入第3门课程的成绩：</span><br><span class="line">73</span><br><span class="line">请输入第4门课程的成绩：</span><br><span class="line">47</span><br><span class="line">请输入第5门课程的成绩：</span><br><span class="line">99</span><br><span class="line">请输入第6门课程的成绩：</span><br><span class="line">84</span><br><span class="line">zhangpu的总成绩为：471</span><br></pre></td></tr></table></figure><p>在该程序中，当录入第 3 门课的成绩时，录入的成绩为负数，判断条件“score&lt;0”为 true，执行“con=false”，用 con 来标记录入是否有误。接着执行 break 语句，执行完之后程序并没有继续执行条件语句后面的语句，而是直接退出 for 循环。之后执行下面的条件判断语句，判断 boolean 变量的 con 是否为 true，如果为 true，则打印总成绩；否则打印“抱歉，分数录入错误，请重新录入！”。</p><p><strong>使用 break 语句实现 goto 的功能（break 带标签）</strong></p><p>有时候，在嵌套很深的循环语句中会发生一些不可预料的事情。此时可能更加希望跳到嵌套的所有循环语句之外。通过添加一些额外的条件判断实现各层循环的检测很不方便。</p><p>幸运的是，Java 与 <a href="http://c.biancheng.net/cplus/">C++</a> 不同，Java 提供了一种带标签的 break 语句，用于跳出多重嵌套的循环语句。</p><p>break 语句可以实现 goto 的功能，并且 Java 定义了 break 语句的一种扩展形式来处理退出嵌套很深的循环这个问题。</p><p>通过使用扩展的 break 语句，可以终止执行一个或者几个任意代码块，这些代码块不必是一个循环或一个 switch 语句的一部分。同时这种扩展的 break 语句带有标签，可以明确指定从何处重新开始执行。</p><p>break 除了具有 goto 退出深层循环嵌套作用外，还保留了一些程序结构化的特性。</p><p>标签 break 语句的通用格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">break label;</span><br></pre></td></tr></table></figure><p>label 是标识代码块的标签。当执行这种形式的 break 语句时，控制权被传递出指定的代码块。被加标签的代码块必须包围 break 语句，但是它不需要直接包围 break 的块。也就是说，可以使用一个加标签的 break 语句来退出一系列的嵌套块，但是不能使用 break 语句将控制权传递到不包含 break 语句的代码块。</p><p>用标签（label）可以指定一个代码块，标签可以是任何合法有效的 Java 标识符，后跟一个冒号。加上标签的代码块可以作为 break 语句的对象，使程序在加标签的块的结尾继续执行。</p><p>下面是使用带标签的break 语句的示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GotoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        label: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                System.out.println(j);</span><br><span class="line">                <span class="keyword">if</span> (j % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span> label;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>这里的 label 是标签的名称，可以为 Java 语言中任意合法的标识符。标签语句必须和循环匹配使用，使用时书写在对应的循环语句的上面，标签语句以冒号结束。如果需要中断标签语句对应的循环，可以采用 break 后面跟标签名的方式。</p><p>如在上面代码中，当 j 为 1 时，“j%2!=0”条件表达式成立，则 label 标签所代表的最外层循环终止。</p><p>注意：通常紧跟 break 之后的标签，必须在 break 所在循环的外层循环之前定义才有意义。</p><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><p>有时强迫一个循环提早反复是有用的，也就是，你可能想要继续运行循环，但是要忽略这次重复剩余的循环体的语句，所以 <a href="http://c.biancheng.net/java/">Java</a> 提供了 continue 语句。continue 语句是 break 语句的补充。</p><p>与 break 语句一样， 它将中断正常的控制流程。continue 语句将控制转移到最内层循环的首部。</p><p>continue 语句是跳过循环体中剩余的语句而强制执行下一次循环，其作用为结束本次循环，即跳过循环体中下面尚未执行的语句，接着进行下一次是否执行循环的判定。</p><p>continue 语句类似于 break 语句，但它只能出现在循环体中。它与 break 语句的区别在于：continue 并不是中断循环语句，而是中止当前迭代的循环，进入下一次的迭代。简单来讲，continue 是忽略循环语句的当次循环。</p><p><strong>注意：</strong>continue 语句只能用在 while 语句、for 语句或者 foreach 语句的循环体之中，在这之外的任何地方使用它都会引起语法错误。</p><p>在循环体中使用 continue 语句有两种方式可以带有标签，也可以不带标签。语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">continue //不带标签</span><br><span class="line">continue label //带标签，label是标签名</span><br></pre></td></tr></table></figure><p>下面看一个示例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Count is: &quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述程序代码中，当条件 i==3 的时候执行 continue 语句，continue 语句会终止本次循环，循环体中 continue 之后的语句将不再执行，接着进行下次循环，所以输出结果中没有 3。程序运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Count is: 0</span><br><span class="line">Count is: 1</span><br><span class="line">Count is: 2</span><br><span class="line">Count is: 4</span><br><span class="line">Count is: 5</span><br><span class="line">Count is: 6</span><br><span class="line">Count is: 7</span><br><span class="line">Count is: 8</span><br><span class="line">Count is: 9</span><br></pre></td></tr></table></figure><p>带标签的 continue 语句示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    label1: <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">5</span>; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">5</span>; y &gt; <span class="number">0</span>; y--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y == x) &#123;</span><br><span class="line">                <span class="keyword">continue</span> label1;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(x+<span class="string">&quot;,&quot;</span>+y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Game Over!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，continue 只会跳出最近的内循环（代码第 3 行的 for 循环），如果要跳出代码第 2 行的外循环，可以为外循环添加一个标签 label1，然后在第 5 行的 continue 语句后面指定这个标签 label1，这样当条件满足执行 continue 语句时，程序就会跳转出外循环。</p><p>程序运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0,5</span><br><span class="line">0,4</span><br><span class="line">0,3</span><br><span class="line">0,2</span><br><span class="line">0,1</span><br><span class="line">1,5</span><br><span class="line">1,4</span><br><span class="line">1,3</span><br><span class="line">1,2</span><br><span class="line">2,5</span><br><span class="line">2,4</span><br><span class="line">2,3</span><br><span class="line">3,5</span><br><span class="line">3,4</span><br><span class="line">4,5</span><br><span class="line">Game Over!</span><br></pre></td></tr></table></figure><p>由于跳过了 x == y，因此下面的内容没有输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1,1</span><br><span class="line">2,2</span><br><span class="line">3,3</span><br><span class="line">4,4</span><br></pre></td></tr></table></figure><h4 id="输出杨辉三角形"><a href="#输出杨辉三角形" class="headerlink" title="输出杨辉三角形"></a>输出杨辉三角形</h4><p>杨辉三角形由数字进行排列，可以把它看作是一个数字表，其基本特性是两侧数值均为 1，其他位置的数值是其左上方数值与右上角数值之和。打印杨辉三角形时需要使用到 for 循环语句。</p><p>打印杨辉三角形的实现思路是：每一行前面都是空格，而每行空格的个数需要根据总行数来确定，这个可以通过找规律归纳出来。关键是数值的实现，每一行的数值（除了第一列和最后一列）都是上一行两个数值之和，因此可以通过上一行来获取。</p><p>实现步骤如下：</p><p>(1) 创建名称为 Test28 的类，在该类中声明 num() 方法，在 num() 方法中传入两个参数，即 x 和 y。其中，x 表示行，y 表示列。num() 方法用于计算第 x 行第 y 列的数值。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">1</span> || y == x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c = num(x - <span class="number">1</span>, y - <span class="number">1</span>) + num(x - <span class="number">1</span>, y);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 创建名称为 calculate 的方法，在该方法中传入一个 int 类型的参数，该参数表示打印杨辉三角形的行数。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= row - i; j++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123; <span class="comment">// 打印空格后面的字符, 从第1 列开始往后打印</span></span><br><span class="line">            System.out.print(num(i, j) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 在 main() 方法中添加代码，首先接收用户在控制台输入的打印行数，然后将行数作为参数传入到调用的 calculate() 方法中。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.print(<span class="string">&quot;打印杨辉三角形的行数：&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> row = scan.nextInt();</span><br><span class="line">    calculate(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) 运行代码进行测试，其运行结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">打印杨辉三角形的行数：7</span><br><span class="line">      1</span><br><span class="line">     1 1</span><br><span class="line">    1 2 1</span><br><span class="line">   1 3 3 1</span><br><span class="line">  1 4 6 4 1</span><br><span class="line"> 1 5 10 10 5 1</span><br><span class="line">1 6 15 20 15 6 1 </span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-选择语句</title>
      <link href="/2020/05/12/Java%E7%AC%94%E8%AE%B0-%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/05/12/Java%E7%AC%94%E8%AE%B0-%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h3><h4 id="If语句"><a href="#If语句" class="headerlink" title="If语句"></a>If语句</h4><p>if 语句是使用最多的条件分支结构，它属于选择语句，也可以称为条件语句。</p><p>if 选择结构是根据条件判断之后再做处理的一种语法结构。默认情况下，if 语句控制着下方紧跟的一条语句的执行。不过，通过语句块，if 语句可以控制多个语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>条件表达式`：条件表达式可以是任意一种逻辑表达式，最后返回的结果必须是一个布尔值。取值可以是一个单纯的布尔变量或常量，也可以是使用关系或布尔运算符的表达式。如果条件为真，那么执行语句块；如果条件为假，则语句块将被绕过而不被执行。</p></li><li><p>语句块`：该语句块可以是一条语句也可以是多条语句。如果仅有一条语句，可省略条件语句中的大括号 {}。当从编程规范角度不要省略大括号，省略大括号会使程序的可读性变差。</p></li></ul><h4 id="if-else-结构"><a href="#if-else-结构" class="headerlink" title="if-else 结构"></a>if-else 结构</h4><p>单 if 语句仅能在满足条件时使用，而无法执行任何其他操作（停止）。而结合 else 语句的 if 可以定义两个操作，此时的 if…else 语句表示“如果条件正确则执行一个操作，否则执行另一个操作”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">    语句块<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多条件-if-else-if-语句"><a href="#多条件-if-else-if-语句" class="headerlink" title="多条件 if-else-if 语句"></a>多条件 if-else-if 语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句块<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句块<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(表达式n) &#123;</span><br><span class="line">    语句块n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句块n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(表达式<span class="number">2</span>) &#123;</span><br><span class="line">        语句块<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(表达式<span class="number">3</span>) &#123;</span><br><span class="line">        语句块<span class="number">3</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">4</span>) &#123;</span><br><span class="line">        语句块<span class="number">4</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(表达式n) &#123;</span><br><span class="line">            语句块n;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            语句块n+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">switch</span> 语句</span><br></pre></td></tr></table></figure><h4 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h4><p>switch 语句是 <a href="http://c.biancheng.net/java/">Java</a> 的多路分支语句。它提供了一种基于一个表达式的值来使程序执行不同部分的简单方法。因此，它提供了一个比一系列 if-else-if 语句更好的选择。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        语句块<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    …</span><br><span class="line">    <span class="keyword">case</span> 值n:</span><br><span class="line">        语句块n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句块n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）switch</p><p>表示“开关”，这个开关就是 switch 关键字后面小括号里的值，小括号里要放一个整型变量或字符型变量。表达式必须为 byte，short，int，char类型。</p><p>2）case</p><p>表示“情况，情形”，case 标签可以是：</p><ul><li>类型为 char、byte、 short 或 int 的常量表达式。</li><li>枚举常量。</li><li>从 Java SE 7 开始， case 标签还可以是字符串字面量。</li></ul><p>3）default</p><p>表示“默认”，即其他情况都不满足。default 后要紧跟冒号，default 块和 case 块的先后顺序可以变动，不会影响程序执行结果。通常，default 块放在末尾，也可以省略不写。</p><p>4）break</p><p>表示“停止”，即跳出当前结构。</p><h4 id="if-语句和-switch-语句的区别"><a href="#if-语句和-switch-语句的区别" class="headerlink" title="if 语句和 switch 语句的区别"></a>if 语句和 switch 语句的区别</h4><p>if 和 switch 语句都表示条件语句，可以从使用效率和实用性两方面加以区分。</p><ol><li>从使用效率上区分</li></ol><p>从使用效率上区分，在对同一个变量的不同值作条件判断时，既可以使用 switch 语句，也可以使用 if 语句。使用 switch 语句的效率更高一些，尤其是判断的分支越多，越明显。</p><ol start="2"><li>从实用性上区分</li></ol><p>从语句的实用性角度区分，switch 语句不如 if 条件语句，if 语句是应用最广泛和最实用的语句。</p><ol start="3"><li>何时使用 if 语句和 switch 语句</li></ol><p>在程序开发的过程中，何时使用 if 语句和 switch 语句，需要根据实际情况而定，应尽量做到物尽其用。不能因为 switch 语句的效率高就一直使用，也不能因为 if 语句常用就不用 switch 语句。需要根据实际情况，具体问题具体分析，使用最适合的条件语句。</p><p>一般情况下，对于判断条件较少的，可以使用 if 条件语句，但是在实现一些多条件的判断中，最好使用 switch 语句。</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-运算符</title>
      <link href="/2020/05/12/Java%E7%AC%94%E8%AE%B0-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/05/12/Java%E7%AC%94%E8%AE%B0-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><table><thead><tr><th>运 算 符</th><th>名 称</th><th>说 明</th><th>例 子</th></tr></thead><tbody><tr><td>-</td><td>取反符号</td><td>取反运算</td><td>b=-a</td></tr><tr><td>++</td><td>自加一</td><td>先取值再加一，或先加一再取值</td><td>a++ 或 ++a</td></tr><tr><td>–</td><td>自减一</td><td>先取值再减一，或先减一再取值</td><td>a– 或 –a</td></tr></tbody></table><h4 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h4><table><thead><tr><th>运 算 符</th><th>名 称</th><th>说 明</th><th>例 子</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>求 a 加 b 的和，还可用于 String 类型，进行字符串连接操作</td><td>a + b</td></tr><tr><td>-</td><td>减</td><td>求 a 减 b 的差</td><td>a - b</td></tr><tr><td>*</td><td>乘</td><td>求 a 乘以 b 的积</td><td>a * b</td></tr><tr><td>/</td><td>除</td><td>求 a 除以 b 的商</td><td>a / b</td></tr><tr><td>%</td><td>取余</td><td>求 a 除以 b 的余数</td><td>a % b</td></tr></tbody></table><p>算术运算符都是双目运算符，即连接两个操作数的运算符。优先级上，*、/、％ 具有相同运算级别，并高于 +、-（+、- 具有相同级别）</p><p>进行算术运算时应注意以下两点：</p><ul><li>求余（％）运算要求参与运算的两个操作数均为整型，不能为其他类型。</li><li>两个整数进行除法运算，其结果仍为整数。如果整数与实数进行除法运算，则结果为实数。</li></ul><h4 id="算术赋值运算符"><a href="#算术赋值运算符" class="headerlink" title="算术赋值运算符"></a>算术赋值运算符</h4><table><thead><tr><th>运 算 符</th><th>名 称</th><th>例 子</th></tr></thead><tbody><tr><td>+=</td><td>加赋值</td><td>a += b、a += b+3</td></tr><tr><td>-=</td><td>减赋值</td><td>a -= b</td></tr><tr><td>*=</td><td>乘赋值</td><td>a *= b</td></tr><tr><td>/=</td><td>除赋值</td><td>a /= b</td></tr><tr><td>%=</td><td>取余赋值</td><td>a %= b</td></tr></tbody></table><p>赋值运算符：赋值运算符是指为变量或常量指定数值的符号。赋值运算符的符号为“=”，它是双目运算符，左边的操作数必须是变量，不能是常量或表达式。</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th>运算符</th><th>用法</th><th>含义</th><th>说明</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>a&amp;&amp;b</td><td>短路与</td><td>ab 全为 true 时，计算结果为 true，否则为 false。</td><td>2&gt;1&amp;&amp;3&lt;4</td><td>true</td></tr><tr><td>||</td><td>a||b</td><td>短路或</td><td>ab 全为 false 时，计算结果为 false，否则为 true。</td><td>2&lt;1||3&gt;4</td><td>false</td></tr><tr><td>!</td><td>!a</td><td>逻辑非</td><td>a 为 true 时，值为 false，a 为 false 时，值为 true</td><td>!(2&gt;4)</td><td>true</td></tr><tr><td>|</td><td>a|b</td><td>逻辑或</td><td>ab 全为 false 时，计算结果为 false，否则为 true</td><td>1&gt;2|3&gt;5</td><td>false</td></tr><tr><td>&amp;</td><td>a&amp;b</td><td>逻辑与</td><td>ab 全为 false 时，计算结果为 false，否则为 true</td><td>1&lt;2&amp;3&lt;5</td><td>true</td></tr></tbody></table><ul><li>&amp;&amp; 与 &amp; 区别：如果 a 为 false，则不计算 b（因为不论 b 为何值，结果都为 false）</li><li>|| 与 | 区别：如果 a 为 true，则不计算 b（因为不论 b 为何值，结果都为 true）</li></ul><p>注意：短路与（&amp;&amp;）和短路或（||）能够采用最优化的计算方式，从而提高效率。在实际编程时，应该优先考虑使用短路与和短路或。</p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><table><thead><tr><th>运算符</th><th>含义</th><th>说明</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>&gt;</td><td>大于运算符</td><td>只支持左右两边操作数是数值类型。如果前面变量的值大于后面变量的值， 则返回 true。</td><td>2&gt;3</td><td>false</td></tr><tr><td>&gt;=</td><td>大于或等于运算符</td><td>只支持左右两边操作数是数值类型。如果前面变量的值大于等于后面变量的值， 则返回 true。</td><td>4&gt;=2</td><td>true</td></tr><tr><td>&lt;</td><td>小于运算符</td><td>只支持左右两边操作数是数值类型。如果前面变量的值小于后面变量的值，则返回 true。</td><td>2&lt;3</td><td>true</td></tr><tr><td>&lt;=</td><td>小于或等于运算符</td><td>只支持左右两边操作数是数值类型。如果前面变量的值小于等于后面变量的值， 则返回 true。</td><td>4&lt;=2</td><td>false</td></tr><tr><td>==</td><td>相等运算符</td><td>如果进行比较的两个操作数都是数值类型，无论它们的数据类型是否相同，只要它们的值不相等，也都将返回 true。 如果两个操作数都是引用类型，只有当两个引用变量的类型具有父子关系时才可以比较，只要两个引用指向的不是同一个对象就会返回 true。 <a href="http://c.biancheng.net/java/">Java</a> 也支持两个 boolean 类型的值进行比较。</td><td>4==4 97==’a’ 5.0==5 true==false</td><td>true true true false</td></tr><tr><td>!=</td><td>不相等运算符</td><td>如果进行比较的两个操作数都是数值类型，无论它们的数据类型是否相同，只要它们的值不相等，也都将返回 true。 如果两个操作数都是引用类型，只有当两个引用变量的类型具有父子关系时才可以比较，只要两个引用指向的不是同一个对象就会返回 true。</td><td>4!=2</td><td>true</td></tr></tbody></table><p>关系运算符的优先级为：&gt;、&lt;、&gt;=、&lt;= 具有相同的优先级，并且高于具有相同优先级的 !=、==。关系运算符的优先级高于赋值运算符而低于算术运算符，结合方向是自左向右。</p><p>关系表达式通常用于 Java 程序的逻辑判断语句的条件表达式中。使用关系表达式要注意以下几点：</p><ul><li>运算符 &gt;=、==、！=、&lt;= 是两个字符构成的一个运算符，用空格从中分开写就会产生语法错误。例如 <code>x&gt; =y;</code> 是错误的，但是可以写成<code>x &gt;= y;</code> 在运算符的两侧增加空格会提高可读性。同样将运算符写反，例如 =&gt;、=&lt;、=! 等形式会产生语法错误。</li><li>由于计算机内存放的实数与实际的实数存在着一定的误差，如果对浮点数进行 ==（相等）或 !=（不相等）的比较，容易产生错误结果，应该尽量避免。</li><li>不要将“==”写成“=”。</li></ul><h4 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h4><table><thead><tr><th>运算符</th><th>含义</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>i++</td><td>将 i 的值先使用再加 1 赋值给 i 变量本身</td><td>int i=1; int j=i++;</td><td>i=2 j=1</td></tr><tr><td>++i</td><td>将 i 的值先加 1 赋值给变量 i 本身后再使用</td><td>int i=1; int j=++i;</td><td>i=2 j=2</td></tr><tr><td>i–</td><td>将 i 的值先使用再减 1 赋值给变量 i 本身</td><td>int i=1; int j=i–;</td><td>i=0 j=1</td></tr><tr><td>–i</td><td>将 i 的值先减 1 后赋值给变量 i 本身再使用</td><td>int i=1; int j=–i;</td><td>i=0 j=0</td></tr></tbody></table><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><p>和c一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">    max = a;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    max = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上语句等于下面语句</span></span><br><span class="line">a&gt;b? a:b;</span><br></pre></td></tr></table></figure><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><table><thead><tr><th>优先级</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>()、[]、{}</td><td>从左向右</td></tr><tr><td>2</td><td>!、+、-、~、++、–</td><td>从右向左</td></tr><tr><td>3</td><td>*、/、%</td><td>从左向右</td></tr><tr><td>4</td><td>+、-</td><td>从左向右</td></tr><tr><td>5</td><td>«、»、&gt;&gt;&gt;</td><td>从左向右</td></tr><tr><td>6</td><td>&lt;、&lt;=、&gt;、&gt;=、instanceof</td><td>从左向右</td></tr><tr><td>7</td><td>==、!=</td><td>从左向右</td></tr><tr><td>8</td><td>&amp;</td><td>从左向右</td></tr><tr><td>9</td><td>^</td><td>从左向右</td></tr><tr><td>10</td><td>|</td><td>从左向右</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>从左向右</td></tr><tr><td>12</td><td>||</td><td>从左向右</td></tr><tr><td>13</td><td>?:</td><td>从右向左</td></tr><tr><td>14</td><td>=、+=、-=、*=、/=、&amp;=、|=、^=、~=、«=、»=、&gt;&gt;&gt;=</td><td>从右向左</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记-数据类型</title>
      <link href="/2020/05/12/Java%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/05/12/Java%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h3><table><thead><tr><th>类型名称</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1 字节</td><td>-128~127</td></tr><tr><td>短整型</td><td>short</td><td>2 字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td>int</td><td>4 字节</td><td>-2147483648~2147483647</td></tr><tr><td>长整型</td><td>long</td><td>8 字节</td><td>-9223372036854775808L~9223372036854775807L</td></tr><tr><td>单精度浮点型</td><td>float</td><td>4 字节</td><td>+/-3.4E+38F（6~7 个有效位）</td></tr><tr><td>双精度浮点型</td><td>double</td><td>8 字节</td><td>+/-1.8E+308 (15 个有效位）</td></tr><tr><td>字符型</td><td>char</td><td>2 字节</td><td>ISO 单一字符集</td></tr><tr><td>布尔型</td><td>boolean</td><td>1 字节</td><td>true 或 false</td></tr></tbody></table><p><img src="http://c.biancheng.net/uploads/allimg/190909/5-1ZZZ91512493.jpg" alt="Java数据类型结构图"></p><h3 id="2-类型转换"><a href="#2-类型转换" class="headerlink" title="2.类型转换"></a>2.类型转换</h3><h4 id="隐式转换（自动类型转换）"><a href="#隐式转换（自动类型转换）" class="headerlink" title="隐式转换（自动类型转换）"></a>隐式转换（自动类型转换）</h4><p>如果以下 2 个条件都满足，那么将一种类型的数据赋给另外一种类型变量的时，将执行自动类型转换（automatic type conversion）。</p><ul><li>两种数据类型彼此兼容</li><li>目标类型的取值范围大于源数据类型（低级类型数据转换成高级类型数据）</li></ul><p>例如：byte类型转换为short类型</p><p>自动转换的规则是从低级类型数据转换成高级类型数据。转换规则如下：</p><ul><li>数值型数据的转换：byte→short→int→long→float→double。</li><li>字符型转换为整型：char→int。</li></ul><p>注意：char 类型比较特殊，char 自动转换成 int、long、float 和 double，但 byte 和 short 不能自动转换为 char，而且 char 也不能自动转换为 byte 或 short。</p><h4 id="显式转换（强制类型转换）"><a href="#显式转换（强制类型转换）" class="headerlink" title="显式转换（强制类型转换）"></a>显式转换（强制类型转换）</h4><p>格式：如short类型转换为int类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">short</span> c = (<span class="keyword">short</span>)b;</span><br></pre></td></tr></table></figure><p>在强制类型转换中，如果是将浮点类型的值转换为整数，直接去掉小数点后边的所有数字；而如果是整数类型强制转换为浮点类型时，将在小数点后面补零。</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎！！！</title>
      <link href="/2020/05/12/%E6%AC%A2%E8%BF%8E%EF%BC%81%EF%BC%81%EF%BC%81/"/>
      <url>/2020/05/12/%E6%AC%A2%E8%BF%8E%EF%BC%81%EF%BC%81%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到我的博客！"><a href="#欢迎来到我的博客！" class="headerlink" title="欢迎来到我的博客！"></a><strong>欢迎来到我的博客</strong>！</h1><p>第一次使用博客，多多关照，我会继续努力的，加油！</p><ol start="2"><li></li><li></li><li></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 欢迎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/11/hello-world/"/>
      <url>/2020/05/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
